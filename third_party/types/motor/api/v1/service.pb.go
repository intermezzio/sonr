// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: motor/v1/service.proto

// Package Motor is used for defining a Motor node and its properties.

package v1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("motor/v1/service.proto", fileDescriptor_f688c43daaa41ca8) }

var fileDescriptor_f688c43daaa41ca8 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4d, 0x8b, 0xd4, 0x30,
	0x18, 0xc7, 0x67, 0xc0, 0x17, 0xc8, 0x8e, 0x97, 0xf8, 0x06, 0x73, 0x28, 0xae, 0x8a, 0xee, 0x0a,
	0xb6, 0x76, 0x05, 0xef, 0x8e, 0xa7, 0xe2, 0x0b, 0xab, 0xa3, 0x08, 0xc2, 0xa2, 0xd9, 0x6c, 0x9c,
	0x06, 0x6d, 0x53, 0x93, 0xb4, 0x50, 0x05, 0x3f, 0x83, 0x1f, 0xcb, 0x83, 0x87, 0x39, 0x7a, 0x94,
	0x99, 0x2f, 0x22, 0xcd, 0x8b, 0x6d, 0xc7, 0x4e, 0xda, 0x39, 0x15, 0xf2, 0xfc, 0x9e, 0xff, 0xaf,
	0x79, 0x12, 0x08, 0xb8, 0x96, 0x30, 0xc9, 0x78, 0x50, 0x84, 0x81, 0x20, 0xbc, 0xa0, 0x98, 0xf8,
	0x19, 0x67, 0x92, 0xc1, 0xcb, 0x82, 0xa5, 0x9c, 0x32, 0x5f, 0x95, 0x7d, 0x94, 0x51, 0xbf, 0x08,
	0xa7, 0x35, 0xcc, 0xc9, 0x97, 0x9c, 0x08, 0xa9, 0xe1, 0xe9, 0xf5, 0xc6, 0xba, 0xc8, 0x58, 0x2a,
	0x4c, 0xca, 0xd1, 0xaf, 0x3d, 0x30, 0x79, 0x5e, 0xd5, 0xe6, 0x3a, 0x1c, 0x9e, 0x00, 0x10, 0xa5,
	0x54, 0x52, 0xf4, 0x99, 0x7e, 0x25, 0xf0, 0x8e, 0xdf, 0x61, 0xf1, 0x6b, 0xe0, 0x95, 0xb6, 0x4c,
	0xef, 0xf6, 0x72, 0xda, 0x0a, 0x3f, 0x82, 0x4b, 0x4f, 0x38, 0x41, 0x92, 0x3c, 0xc6, 0x98, 0xe5,
	0xa9, 0x84, 0x87, 0x9d, 0x9d, 0x2d, 0xc6, 0x4a, 0xee, 0x0d, 0x41, 0x8d, 0xe7, 0x05, 0x38, 0xff,
	0x8c, 0x2d, 0x68, 0x0a, 0xf7, 0x3b, 0x9b, 0x54, 0xcd, 0xe6, 0xde, 0x74, 0x21, 0x75, 0xde, 0xcb,
	0x9c, 0xf0, 0x72, 0x4b, 0x9e, 0xaa, 0xb9, 0xf3, 0x0c, 0x62, 0xf2, 0x5e, 0x83, 0x8b, 0xc7, 0xa8,
	0x4c, 0x48, 0x2a, 0xe1, 0xad, 0x4e, 0xdc, 0x54, 0x6d, 0xe6, 0x6d, 0x37, 0x64, 0x52, 0x4f, 0x00,
	0x50, 0x9a, 0xb7, 0x31, 0x8b, 0xc4, 0x96, 0xc3, 0xab, 0x01, 0xf7, 0xe1, 0x35, 0x39, 0x13, 0x8f,
	0xc1, 0x44, 0x4f, 0x7b, 0x8e, 0x63, 0x92, 0x20, 0x78, 0xe0, 0x38, 0x10, 0x8d, 0x58, 0xc5, 0xe1,
	0x00, 0xd2, 0x48, 0x3e, 0x80, 0x3d, 0xa3, 0x46, 0x32, 0x12, 0xd0, 0xf9, 0x73, 0x15, 0x61, 0x15,
	0x07, 0xfd, 0xa0, 0x31, 0x7c, 0x03, 0x57, 0x1a, 0xcb, 0xb3, 0x52, 0xfd, 0x06, 0xe3, 0xf0, 0x41,
	0x5f, 0xc2, 0x3f, 0xd4, 0x3a, 0xc3, 0x1d, 0x3a, 0x36, 0xb6, 0x67, 0x46, 0xe8, 0xd8, 0x5e, 0x7b,
	0x82, 0xc3, 0xb7, 0x87, 0xc1, 0xc4, 0x2c, 0x13, 0x4e, 0x22, 0x01, 0x9d, 0x9d, 0x0a, 0x71, 0x9f,
	0x52, 0x9b, 0x34, 0x92, 0xef, 0xe0, 0x6a, 0x73, 0xbd, 0x1e, 0x62, 0xd8, 0x9b, 0xf1, 0xdf, 0x14,
	0x8f, 0x76, 0x69, 0xd9, 0xbc, 0x8a, 0xb3, 0x1c, 0x7f, 0x22, 0xd2, 0x79, 0x15, 0x35, 0x32, 0xe4,
	0x2a, 0x5a, 0xb2, 0x96, 0xbc, 0xc9, 0xce, 0xfa, 0x24, 0x4d, 0xc4, 0x2d, 0x69, 0x93, 0x46, 0xf2,
	0x14, 0x9c, 0x9b, 0x4b, 0x24, 0xe1, 0x8d, 0xce, 0x96, 0xaa, 0x64, 0x43, 0xf7, 0x1d, 0x84, 0x0e,
	0x9b, 0x1d, 0xff, 0x5c, 0x79, 0xe3, 0xe5, 0xca, 0x1b, 0xff, 0x59, 0x79, 0xe3, 0x1f, 0x6b, 0x6f,
	0xb4, 0x5c, 0x7b, 0xa3, 0xdf, 0x6b, 0x6f, 0xf4, 0xee, 0xd1, 0x82, 0xca, 0x38, 0x3f, 0xf5, 0x31,
	0x4b, 0x82, 0x2a, 0xe6, 0x3e, 0x65, 0xea, 0x1b, 0xc8, 0x98, 0xf2, 0xb3, 0xf7, 0x19, 0xe2, 0xb2,
	0x0c, 0x64, 0x99, 0x11, 0x11, 0xe8, 0xb7, 0x02, 0x65, 0x34, 0x28, 0xc2, 0xd3, 0x0b, 0xea, 0x9d,
	0x78, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x87, 0x13, 0x74, 0x39, 0x87, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MotorServiceClient is the client API for MotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MotorServiceClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Payment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	QueryWhoIs(ctx context.Context, in *QueryWhoIsRequest, opts ...grpc.CallOption) (*QueryWhoIsResponse, error)
	CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error)
	QueryWhatIs(ctx context.Context, in *QueryWhatIsRequest, opts ...grpc.CallOption) (*QueryWhatIsResponse, error)
	QueryWhatIsByCreator(ctx context.Context, in *QueryWhatIsByCreatorRequest, opts ...grpc.CallOption) (*QueryWhatIsByCreatorResponse, error)
	QuerySchema(ctx context.Context, in *QuerySchemaRequest, opts ...grpc.CallOption) (*QueryWhatIsResponse, error)
	QueryWhereIs(ctx context.Context, in *QueryWhereIsRequest, opts ...grpc.CallOption) (*QueryWhereIsResponse, error)
	QueryWhereIsByCreator(ctx context.Context, in *QueryWhereIsByCreatorRequest, opts ...grpc.CallOption) (*QueryWhereIsByCreatorResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type motorServiceClient struct {
	cc grpc1.ClientConn
}

func NewMotorServiceClient(cc grpc1.ClientConn) MotorServiceClient {
	return &motorServiceClient{cc}
}

func (c *motorServiceClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Payment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/Payment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) QueryWhoIs(ctx context.Context, in *QueryWhoIsRequest, opts ...grpc.CallOption) (*QueryWhoIsResponse, error) {
	out := new(QueryWhoIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/QueryWhoIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error) {
	out := new(CreateSchemaResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/CreateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) QueryWhatIs(ctx context.Context, in *QueryWhatIsRequest, opts ...grpc.CallOption) (*QueryWhatIsResponse, error) {
	out := new(QueryWhatIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/QueryWhatIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) QueryWhatIsByCreator(ctx context.Context, in *QueryWhatIsByCreatorRequest, opts ...grpc.CallOption) (*QueryWhatIsByCreatorResponse, error) {
	out := new(QueryWhatIsByCreatorResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/QueryWhatIsByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) QuerySchema(ctx context.Context, in *QuerySchemaRequest, opts ...grpc.CallOption) (*QueryWhatIsResponse, error) {
	out := new(QueryWhatIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/QuerySchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) QueryWhereIs(ctx context.Context, in *QueryWhereIsRequest, opts ...grpc.CallOption) (*QueryWhereIsResponse, error) {
	out := new(QueryWhereIsResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/QueryWhereIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) QueryWhereIsByCreator(ctx context.Context, in *QueryWhereIsByCreatorRequest, opts ...grpc.CallOption) (*QueryWhereIsByCreatorResponse, error) {
	out := new(QueryWhereIsByCreatorResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/QueryWhereIsByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketResponse, error) {
	out := new(UpdateBucketResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/UpdateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/sonrio.motor.api.v1.MotorService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotorServiceServer is the server API for MotorService service.
type MotorServiceServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Payment(context.Context, *PaymentRequest) (*PaymentResponse, error)
	QueryWhoIs(context.Context, *QueryWhoIsRequest) (*QueryWhoIsResponse, error)
	CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error)
	QueryWhatIs(context.Context, *QueryWhatIsRequest) (*QueryWhatIsResponse, error)
	QueryWhatIsByCreator(context.Context, *QueryWhatIsByCreatorRequest) (*QueryWhatIsByCreatorResponse, error)
	QuerySchema(context.Context, *QuerySchemaRequest) (*QueryWhatIsResponse, error)
	QueryWhereIs(context.Context, *QueryWhereIsRequest) (*QueryWhereIsResponse, error)
	QueryWhereIsByCreator(context.Context, *QueryWhereIsByCreatorRequest) (*QueryWhereIsByCreatorResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	UpdateBucket(context.Context, *UpdateBucketRequest) (*UpdateBucketResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
}

// UnimplementedMotorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMotorServiceServer struct {
}

func (*UnimplementedMotorServiceServer) Initialize(ctx context.Context, req *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (*UnimplementedMotorServiceServer) CreateAccount(ctx context.Context, req *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedMotorServiceServer) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedMotorServiceServer) Query(ctx context.Context, req *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedMotorServiceServer) Payment(ctx context.Context, req *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payment not implemented")
}
func (*UnimplementedMotorServiceServer) QueryWhoIs(ctx context.Context, req *QueryWhoIsRequest) (*QueryWhoIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhoIs not implemented")
}
func (*UnimplementedMotorServiceServer) CreateSchema(ctx context.Context, req *CreateSchemaRequest) (*CreateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (*UnimplementedMotorServiceServer) QueryWhatIs(ctx context.Context, req *QueryWhatIsRequest) (*QueryWhatIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhatIs not implemented")
}
func (*UnimplementedMotorServiceServer) QueryWhatIsByCreator(ctx context.Context, req *QueryWhatIsByCreatorRequest) (*QueryWhatIsByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhatIsByCreator not implemented")
}
func (*UnimplementedMotorServiceServer) QuerySchema(ctx context.Context, req *QuerySchemaRequest) (*QueryWhatIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySchema not implemented")
}
func (*UnimplementedMotorServiceServer) QueryWhereIs(ctx context.Context, req *QueryWhereIsRequest) (*QueryWhereIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhereIs not implemented")
}
func (*UnimplementedMotorServiceServer) QueryWhereIsByCreator(ctx context.Context, req *QueryWhereIsByCreatorRequest) (*QueryWhereIsByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhereIsByCreator not implemented")
}
func (*UnimplementedMotorServiceServer) CreateBucket(ctx context.Context, req *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (*UnimplementedMotorServiceServer) UpdateBucket(ctx context.Context, req *UpdateBucketRequest) (*UpdateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucket not implemented")
}
func (*UnimplementedMotorServiceServer) Stat(ctx context.Context, req *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}

func RegisterMotorServiceServer(s grpc1.Server, srv MotorServiceServer) {
	s.RegisterService(&_MotorService_serviceDesc, srv)
}

func _MotorService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Payment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Payment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/Payment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Payment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_QueryWhoIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhoIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).QueryWhoIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/QueryWhoIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).QueryWhoIs(ctx, req.(*QueryWhoIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/CreateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).CreateSchema(ctx, req.(*CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_QueryWhatIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhatIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).QueryWhatIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/QueryWhatIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).QueryWhatIs(ctx, req.(*QueryWhatIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_QueryWhatIsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhatIsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).QueryWhatIsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/QueryWhatIsByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).QueryWhatIsByCreator(ctx, req.(*QueryWhatIsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_QuerySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).QuerySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/QuerySchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).QuerySchema(ctx, req.(*QuerySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_QueryWhereIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhereIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).QueryWhereIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/QueryWhereIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).QueryWhereIs(ctx, req.(*QueryWhereIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_QueryWhereIsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhereIsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).QueryWhereIsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/QueryWhereIsByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).QueryWhereIsByCreator(ctx, req.(*QueryWhereIsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_UpdateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).UpdateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/UpdateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).UpdateBucket(ctx, req.(*UpdateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrio.motor.api.v1.MotorService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MotorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrio.motor.api.v1.MotorService",
	HandlerType: (*MotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _MotorService_Initialize_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _MotorService_CreateAccount_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MotorService_Login_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _MotorService_Query_Handler,
		},
		{
			MethodName: "Payment",
			Handler:    _MotorService_Payment_Handler,
		},
		{
			MethodName: "QueryWhoIs",
			Handler:    _MotorService_QueryWhoIs_Handler,
		},
		{
			MethodName: "CreateSchema",
			Handler:    _MotorService_CreateSchema_Handler,
		},
		{
			MethodName: "QueryWhatIs",
			Handler:    _MotorService_QueryWhatIs_Handler,
		},
		{
			MethodName: "QueryWhatIsByCreator",
			Handler:    _MotorService_QueryWhatIsByCreator_Handler,
		},
		{
			MethodName: "QuerySchema",
			Handler:    _MotorService_QuerySchema_Handler,
		},
		{
			MethodName: "QueryWhereIs",
			Handler:    _MotorService_QueryWhereIs_Handler,
		},
		{
			MethodName: "QueryWhereIsByCreator",
			Handler:    _MotorService_QueryWhereIsByCreator_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _MotorService_CreateBucket_Handler,
		},
		{
			MethodName: "UpdateBucket",
			Handler:    _MotorService_UpdateBucket_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _MotorService_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "motor/v1/service.proto",
}
