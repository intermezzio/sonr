// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service/v1/exchange.proto

// Package exchange defines interfaces and types for exchange between two nodes in the network.

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/sonr-io/sonr/third_party/types/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MailboxMessage struct {
	Id        string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Body      []byte       `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	From      *common.Peer `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To        *common.Peer `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Signature []byte       `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	CreatedAt int64        `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *MailboxMessage) Reset()         { *m = MailboxMessage{} }
func (m *MailboxMessage) String() string { return proto.CompactTextString(m) }
func (*MailboxMessage) ProtoMessage()    {}
func (*MailboxMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dc2fc2d108a93d8, []int{0}
}
func (m *MailboxMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailboxMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailboxMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailboxMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailboxMessage.Merge(m, src)
}
func (m *MailboxMessage) XXX_Size() int {
	return m.Size()
}
func (m *MailboxMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MailboxMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MailboxMessage proto.InternalMessageInfo

func (m *MailboxMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MailboxMessage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *MailboxMessage) GetFrom() *common.Peer {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *MailboxMessage) GetTo() *common.Peer {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MailboxMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MailboxMessage) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

// Invitation Message sent on RPC
type InviteRequest struct {
	Body      []byte       `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Signature []byte       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	From      *common.Peer `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To        *common.Peer `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *InviteRequest) Reset()         { *m = InviteRequest{} }
func (m *InviteRequest) String() string { return proto.CompactTextString(m) }
func (*InviteRequest) ProtoMessage()    {}
func (*InviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dc2fc2d108a93d8, []int{1}
}
func (m *InviteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteRequest.Merge(m, src)
}
func (m *InviteRequest) XXX_Size() int {
	return m.Size()
}
func (m *InviteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InviteRequest proto.InternalMessageInfo

func (m *InviteRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *InviteRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *InviteRequest) GetFrom() *common.Peer {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *InviteRequest) GetTo() *common.Peer {
	if m != nil {
		return m.To
	}
	return nil
}

// Reply Message sent on RPC
type InviteResponse struct {
	Decision  bool         `protobuf:"varint,1,opt,name=decision,proto3" json:"decision,omitempty"`
	Body      []byte       `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Signature []byte       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	From      *common.Peer `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To        *common.Peer `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *InviteResponse) Reset()         { *m = InviteResponse{} }
func (m *InviteResponse) String() string { return proto.CompactTextString(m) }
func (*InviteResponse) ProtoMessage()    {}
func (*InviteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dc2fc2d108a93d8, []int{2}
}
func (m *InviteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteResponse.Merge(m, src)
}
func (m *InviteResponse) XXX_Size() int {
	return m.Size()
}
func (m *InviteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InviteResponse proto.InternalMessageInfo

func (m *InviteResponse) GetDecision() bool {
	if m != nil {
		return m.Decision
	}
	return false
}

func (m *InviteResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *InviteResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *InviteResponse) GetFrom() *common.Peer {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *InviteResponse) GetTo() *common.Peer {
	if m != nil {
		return m.To
	}
	return nil
}

func init() {
	proto.RegisterType((*MailboxMessage)(nil), "sonrio.motor.service.v1.MailboxMessage")
	proto.RegisterType((*InviteRequest)(nil), "sonrio.motor.service.v1.InviteRequest")
	proto.RegisterType((*InviteResponse)(nil), "sonrio.motor.service.v1.InviteResponse")
}

func init() { proto.RegisterFile("service/v1/exchange.proto", fileDescriptor_7dc2fc2d108a93d8) }

var fileDescriptor_7dc2fc2d108a93d8 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xbb, 0xee, 0xd3, 0x30,
	0x18, 0xc5, 0xeb, 0x34, 0xff, 0xbf, 0x5a, 0x03, 0x1d, 0x2c, 0x2e, 0xa1, 0x82, 0x28, 0xea, 0x80,
	0x22, 0x24, 0x1c, 0x15, 0x9e, 0xa0, 0x6c, 0x0c, 0x95, 0xaa, 0x8c, 0x2c, 0x95, 0x93, 0x7c, 0x4d,
	0x2d, 0x11, 0x7f, 0xc1, 0x76, 0xa3, 0xf6, 0x2d, 0x58, 0x78, 0x11, 0xde, 0x01, 0x89, 0xb1, 0x23,
	0x23, 0x6a, 0x5f, 0x04, 0xc5, 0xbd, 0x51, 0xc4, 0x6d, 0x61, 0xb2, 0xfd, 0xe9, 0x1c, 0x9f, 0x9f,
	0xad, 0x43, 0x1f, 0x1b, 0xd0, 0x8d, 0xcc, 0x21, 0x69, 0xc6, 0x09, 0xac, 0xf3, 0xa5, 0x50, 0x25,
	0xf0, 0x5a, 0xa3, 0x45, 0xf6, 0xc8, 0xa0, 0xd2, 0x12, 0x79, 0x85, 0x16, 0x35, 0x3f, 0xea, 0x78,
	0x33, 0x1e, 0xde, 0xcf, 0xb1, 0xaa, 0x50, 0xb5, 0x16, 0xa9, 0x16, 0x78, 0x90, 0x8f, 0x3e, 0x13,
	0x3a, 0x98, 0x0a, 0xf9, 0x2e, 0xc3, 0xf5, 0x14, 0x8c, 0x11, 0x25, 0xb0, 0x01, 0xf5, 0x64, 0x11,
	0x90, 0x88, 0xc4, 0xfd, 0xd4, 0x93, 0x05, 0x63, 0xd4, 0xcf, 0xb0, 0xd8, 0x04, 0x5e, 0x44, 0xe2,
	0xbb, 0xa9, 0xdb, 0xb3, 0xe7, 0xd4, 0x5f, 0x68, 0xac, 0x82, 0x6e, 0x44, 0xe2, 0x3b, 0x2f, 0x1f,
	0xf2, 0x63, 0xe8, 0x21, 0x82, 0x37, 0x63, 0x3e, 0x03, 0xd0, 0xa9, 0xd3, 0xb0, 0x67, 0xd4, 0xb3,
	0x18, 0xf8, 0x7f, 0x54, 0x7a, 0x16, 0xd9, 0x13, 0xda, 0x37, 0xb2, 0x54, 0xc2, 0xae, 0x34, 0x04,
	0x37, 0x2e, 0xec, 0x32, 0x60, 0x4f, 0x29, 0xcd, 0x35, 0x08, 0x0b, 0xc5, 0x5c, 0xd8, 0xe0, 0x36,
	0x22, 0x71, 0x37, 0xed, 0x1f, 0x27, 0x13, 0x3b, 0xfa, 0x48, 0xe8, 0xbd, 0x37, 0xaa, 0x91, 0x16,
	0x52, 0x78, 0xbf, 0x02, 0x63, 0xcf, 0xd8, 0xe4, 0x07, 0xec, 0xab, 0x08, 0xef, 0xe7, 0x88, 0xff,
	0xf0, 0xa8, 0xd1, 0x27, 0x42, 0x07, 0x27, 0x2e, 0x53, 0xa3, 0x32, 0xc0, 0x86, 0xb4, 0x57, 0x40,
	0x2e, 0x8d, 0x44, 0xe5, 0xe0, 0x7a, 0xe9, 0xf9, 0xfc, 0xcb, 0xbf, 0xbe, 0x82, 0xee, 0xfe, 0x0e,
	0xda, 0xff, 0x67, 0xe8, 0x9b, 0xbf, 0x41, 0xbf, 0xb6, 0x5f, 0x76, 0x21, 0xd9, 0xee, 0x42, 0xf2,
	0x6d, 0x17, 0x92, 0x0f, 0xfb, 0xb0, 0xb3, 0xdd, 0x87, 0x9d, 0xaf, 0xfb, 0xb0, 0x43, 0x1f, 0x48,
	0x74, 0x3e, 0x6e, 0x37, 0x35, 0x98, 0x53, 0xbd, 0x66, 0xe4, 0xed, 0xa4, 0x94, 0x76, 0xb9, 0xca,
	0xda, 0xdb, 0x92, 0x56, 0xf0, 0x42, 0xa2, 0x5b, 0x13, 0xbb, 0x94, 0xba, 0x98, 0xd7, 0x42, 0xdb,
	0x4d, 0xe2, 0x4c, 0x89, 0x6b, 0x66, 0x22, 0x6a, 0xd9, 0x56, 0xf1, 0x52, 0xe4, 0xec, 0xd6, 0x35,
	0xf2, 0xd5, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0xe4, 0x54, 0x1e, 0xdd, 0x02, 0x00, 0x00,
}

func (m *MailboxMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailboxMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailboxMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if m.Decision {
		i--
		if m.Decision {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExchange(dAtA []byte, offset int, v uint64) int {
	offset -= sovExchange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MailboxMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovExchange(uint64(m.CreatedAt))
	}
	return n
}

func (m *InviteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *InviteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Decision {
		n += 2
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func sovExchange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExchange(x uint64) (n int) {
	return sovExchange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MailboxMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailboxMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailboxMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &common.Peer{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &common.Peer{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &common.Peer{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &common.Peer{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Decision = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &common.Peer{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &common.Peer{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExchange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExchange
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExchange
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExchange
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExchange        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExchange          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExchange = fmt.Errorf("proto: unexpected end of group")
)
