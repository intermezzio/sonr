// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service/v1beta/wallet.proto

// Package Discover is used to find other Peers in the sonr network.

package v1beta

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/sonr-io/sonr/x/registry/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WalletEventType int32

const (
	WalletEventType_WalletEventType_NONE             WalletEventType = 0
	WalletEventType_WalletEventType_GENERATED        WalletEventType = 1
	WalletEventType_WalletEventType_VAULT_CONFIGURED WalletEventType = 2
	WalletEventType_WalletEventType_BROADCASTED      WalletEventType = 3
)

var WalletEventType_name = map[int32]string{
	0: "WalletEventType_NONE",
	1: "WalletEventType_GENERATED",
	2: "WalletEventType_VAULT_CONFIGURED",
	3: "WalletEventType_BROADCASTED",
}

var WalletEventType_value = map[string]int32{
	"WalletEventType_NONE":             0,
	"WalletEventType_GENERATED":        1,
	"WalletEventType_VAULT_CONFIGURED": 2,
	"WalletEventType_BROADCASTED":      3,
}

func (x WalletEventType) String() string {
	return proto.EnumName(WalletEventType_name, int32(x))
}

func (WalletEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a2bec09c9c369eb6, []int{0}
}

type WalletEvent struct {
	Type        WalletEventType    `protobuf:"varint,1,opt,name=type,proto3,enum=sonrio.motor.service.v1beta.WalletEventType" json:"type,omitempty"`
	Address     string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	DidDocument *types.DIDDocument `protobuf:"bytes,3,opt,name=did_document,json=didDocument,proto3" json:"did_document,omitempty"`
	WhoIs       *types.WhoIs       `protobuf:"bytes,4,opt,name=who_is,json=whoIs,proto3" json:"who_is,omitempty"`
}

func (m *WalletEvent) Reset()         { *m = WalletEvent{} }
func (m *WalletEvent) String() string { return proto.CompactTextString(m) }
func (*WalletEvent) ProtoMessage()    {}
func (*WalletEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2bec09c9c369eb6, []int{0}
}
func (m *WalletEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletEvent.Merge(m, src)
}
func (m *WalletEvent) XXX_Size() int {
	return m.Size()
}
func (m *WalletEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WalletEvent proto.InternalMessageInfo

func (m *WalletEvent) GetType() WalletEventType {
	if m != nil {
		return m.Type
	}
	return WalletEventType_WalletEventType_NONE
}

func (m *WalletEvent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WalletEvent) GetDidDocument() *types.DIDDocument {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *WalletEvent) GetWhoIs() *types.WhoIs {
	if m != nil {
		return m.WhoIs
	}
	return nil
}

func init() {
	proto.RegisterEnum("sonrio.motor.service.v1beta.WalletEventType", WalletEventType_name, WalletEventType_value)
	proto.RegisterType((*WalletEvent)(nil), "sonrio.motor.service.v1beta.WalletEvent")
}

func init() { proto.RegisterFile("service/v1beta/wallet.proto", fileDescriptor_a2bec09c9c369eb6) }

var fileDescriptor_a2bec09c9c369eb6 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x5f, 0xeb, 0xd3, 0x30,
	0x14, 0x6d, 0x7e, 0x9b, 0x13, 0x33, 0xd1, 0x11, 0x14, 0xea, 0x8a, 0xb5, 0x8a, 0x0f, 0x43, 0x34,
	0xc1, 0xf9, 0x2e, 0x76, 0x6b, 0x1d, 0x03, 0xe9, 0xa0, 0x6e, 0x4e, 0x7c, 0x29, 0xdd, 0x12, 0xd6,
	0xc0, 0xb6, 0x94, 0x24, 0xdb, 0xe8, 0xb7, 0xd0, 0x6f, 0xe5, 0xe3, 0x1e, 0x7d, 0x94, 0xf5, 0x8b,
	0x48, 0xdb, 0x55, 0xb4, 0x88, 0x4f, 0x87, 0x7b, 0xee, 0x39, 0xf7, 0x4f, 0x6e, 0xa0, 0xa5, 0x98,
	0x3c, 0xf2, 0x35, 0x23, 0xc7, 0xd7, 0x2b, 0xa6, 0x63, 0x72, 0x8a, 0xb7, 0x5b, 0xa6, 0x71, 0x2a,
	0x85, 0x16, 0xc8, 0x52, 0x62, 0x2f, 0xb9, 0xc0, 0x3b, 0xa1, 0x85, 0xc4, 0x57, 0x25, 0xae, 0x94,
	0x7d, 0x24, 0xd9, 0x86, 0x2b, 0x2d, 0x33, 0x42, 0x39, 0xad, 0x0c, 0xfd, 0x87, 0xbf, 0xb9, 0x53,
	0x22, 0x22, 0xae, 0x2a, 0xfa, 0x59, 0x0e, 0x60, 0x77, 0x59, 0x16, 0xf6, 0x8f, 0x6c, 0xaf, 0xd1,
	0x3b, 0xd8, 0xd6, 0x59, 0xca, 0x4c, 0xe0, 0x80, 0xc1, 0xbd, 0xe1, 0x4b, 0xfc, 0x9f, 0x36, 0xf8,
	0x0f, 0xdf, 0x3c, 0x4b, 0x59, 0x58, 0x3a, 0x91, 0x09, 0x6f, 0xc7, 0x94, 0x4a, 0xa6, 0x94, 0x79,
	0xe3, 0x80, 0xc1, 0x9d, 0xb0, 0x0e, 0x91, 0x07, 0xef, 0x52, 0x4e, 0x23, 0x2a, 0xd6, 0x87, 0x1d,
	0xdb, 0x6b, 0xb3, 0xe5, 0x80, 0x41, 0x77, 0xf8, 0xb4, 0xee, 0x51, 0x00, 0xae, 0xa7, 0xc4, 0xde,
	0xd4, 0xf3, 0xae, 0xc2, 0xb0, 0x4b, 0x39, 0xad, 0x03, 0x34, 0x84, 0x9d, 0x6a, 0x03, 0xb3, 0x5d,
	0xfa, 0xad, 0x7f, 0xfb, 0x97, 0x89, 0x98, 0xaa, 0xf0, 0xd6, 0xa9, 0x80, 0x17, 0xdf, 0x00, 0xbc,
	0xdf, 0x98, 0x16, 0x99, 0xf0, 0x41, 0x83, 0x8a, 0x82, 0x59, 0xe0, 0xf7, 0x0c, 0xf4, 0x18, 0x3e,
	0x6a, 0x66, 0x26, 0x7e, 0xe0, 0x87, 0xee, 0xdc, 0xf7, 0x7a, 0x00, 0x3d, 0x87, 0x4e, 0x33, 0xfd,
	0xc9, 0x5d, 0x7c, 0x98, 0x47, 0xe3, 0x59, 0xf0, 0x7e, 0x3a, 0x59, 0x84, 0xbe, 0xd7, 0xbb, 0x41,
	0x4f, 0xa0, 0xd5, 0x54, 0x8d, 0xc2, 0x99, 0xeb, 0x8d, 0xdd, 0x8f, 0x45, 0x99, 0xd6, 0xe8, 0xf3,
	0xf7, 0x8b, 0x0d, 0xce, 0x17, 0x1b, 0xfc, 0xbc, 0xd8, 0xe0, 0x6b, 0x6e, 0x1b, 0xe7, 0xdc, 0x36,
	0x7e, 0xe4, 0xb6, 0xf1, 0xe5, 0xed, 0x86, 0xeb, 0xe4, 0xb0, 0xc2, 0x6b, 0xb1, 0x23, 0xc5, 0x52,
	0xaf, 0xb8, 0x28, 0x91, 0xe8, 0x84, 0x4b, 0x1a, 0xa5, 0xb1, 0xd4, 0x19, 0x29, 0xde, 0x5a, 0x91,
	0xf2, 0x2e, 0xe4, 0xef, 0x8f, 0xb2, 0xea, 0x94, 0xa7, 0x7d, 0xf3, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0x72, 0x0e, 0x16, 0x84, 0x41, 0x02, 0x00, 0x00,
}

func (m *WalletEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WhoIs != nil {
		{
			size, err := m.WhoIs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWallet(dAtA []byte, offset int, v uint64) int {
	offset -= sovWallet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WalletEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovWallet(uint64(m.Type))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.WhoIs != nil {
		l = m.WhoIs.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func sovWallet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWallet(x uint64) (n int) {
	return sovWallet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WalletEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= WalletEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &types.DIDDocument{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoIs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WhoIs == nil {
				m.WhoIs = &types.WhoIs{}
			}
			if err := m.WhoIs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWallet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWallet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWallet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWallet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWallet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWallet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWallet = fmt.Errorf("proto: unexpected end of group")
)
