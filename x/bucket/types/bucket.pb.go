// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bucket/bucket.proto

// Package Motor is used for defining a Motor node and its properties.

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Wraps items within a bucket. Items will be one of the following
// DID -> reference to another bucket (WhereIs)
// CID -> reference to content (map[string]interface{})
type BucketContent struct {
	// Raw content serialized to bytes
	Item []byte `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// Content id a CID, DID, or unspecified
	Id          string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ContentType ResourceIdentifier `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=sonrio.sonr.bucket.ResourceIdentifier" json:"content_type,omitempty"`
}

func (m *BucketContent) Reset()         { *m = BucketContent{} }
func (m *BucketContent) String() string { return proto.CompactTextString(m) }
func (*BucketContent) ProtoMessage()    {}
func (*BucketContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_748678784c4bd53f, []int{0}
}
func (m *BucketContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketContent.Merge(m, src)
}
func (m *BucketContent) XXX_Size() int {
	return m.Size()
}
func (m *BucketContent) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketContent.DiscardUnknown(m)
}

var xxx_messageInfo_BucketContent proto.InternalMessageInfo

func (m *BucketContent) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *BucketContent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BucketContent) GetContentType() ResourceIdentifier {
	if m != nil {
		return m.ContentType
	}
	return ResourceIdentifier_None
}

func init() {
	proto.RegisterType((*BucketContent)(nil), "sonrio.sonr.bucket.BucketContent")
}

func init() { proto.RegisterFile("bucket/bucket.proto", fileDescriptor_748678784c4bd53f) }

var fileDescriptor_748678784c4bd53f = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x2a, 0x4d, 0xce,
	0x4e, 0x2d, 0xd1, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x42, 0xc5, 0xf9, 0x79,
	0x45, 0x99, 0xf9, 0x7a, 0x20, 0x4a, 0x0f, 0x22, 0x23, 0x25, 0x0a, 0x55, 0x58, 0x9e, 0x91, 0x5a,
	0x94, 0x1a, 0x9f, 0x59, 0x0c, 0x51, 0xaa, 0x54, 0xc7, 0xc5, 0xeb, 0x04, 0x96, 0x70, 0xce, 0xcf,
	0x2b, 0x49, 0xcd, 0x2b, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x2c, 0x49, 0xcd, 0x95, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35,
	0x38, 0x83, 0x98, 0x32, 0x53, 0x84, 0x3c, 0xb9, 0x78, 0x92, 0x21, 0xca, 0xe3, 0x4b, 0x2a, 0x0b,
	0x52, 0x25, 0x98, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0xd4, 0xf4, 0x30, 0xad, 0xd5, 0x0b, 0x4a, 0x2d,
	0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0xf5, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x4c, 0xcb, 0x4c, 0x2d, 0x0a,
	0xe2, 0x86, 0xea, 0x0d, 0xa9, 0x2c, 0x48, 0x75, 0x0a, 0x3f, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23,
	0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6,
	0x63, 0x39, 0x06, 0x2e, 0x61, 0x98, 0x49, 0x20, 0x2b, 0x8a, 0xf5, 0x72, 0xf3, 0x4b, 0xf2, 0x8b,
	0x02, 0x18, 0xa3, 0xd4, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x41,
	0xd2, 0xba, 0x99, 0xf9, 0x60, 0x5a, 0xbf, 0x02, 0x1a, 0x06, 0xfa, 0x60, 0xf5, 0x49, 0x6c, 0x60,
	0xff, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xf0, 0xfe, 0xad, 0x21, 0x01, 0x00, 0x00,
}

func (m *BucketContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContentType != 0 {
		i = encodeVarintBucket(dAtA, i, uint64(m.ContentType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Item) > 0 {
		i -= len(m.Item)
		copy(dAtA[i:], m.Item)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Item)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBucket(dAtA []byte, offset int, v uint64) int {
	offset -= sovBucket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BucketContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Item)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	if m.ContentType != 0 {
		n += 1 + sovBucket(uint64(m.ContentType))
	}
	return n
}

func sovBucket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBucket(x uint64) (n int) {
	return sovBucket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BucketContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBucket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item[:0], dAtA[iNdEx:postIndex]...)
			if m.Item == nil {
				m.Item = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			m.ContentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentType |= ResourceIdentifier(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBucket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBucket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBucket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBucket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBucket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBucket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBucket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBucket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBucket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBucket = fmt.Errorf("proto: unexpected end of group")
)
