syntax = "proto3";
package sonrio.sonr.registry;

import "cosmos/crypto/secp256k1/keys.proto";
import "registry/who_is.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/sonr-io/sonr/x/registry/types";

option java_package = "io.sonr.types.registry";
option java_multiple_files = true;

// Msg defines the Msg service.
service Msg {
  rpc CreateWhoIs(MsgCreateWhoIs) returns (MsgCreateWhoIsResponse);
  rpc UpdateWhoIs(MsgUpdateWhoIs) returns (MsgUpdateWhoIsResponse);
  rpc DeactivateWhoIs(MsgDeactivateWhoIs) returns (MsgDeactivateWhoIsResponse);
  rpc BuyAlias(MsgBuyAlias) returns (MsgBuyAliasResponse);
  rpc SellAlias(MsgSellAlias) returns (MsgSellAliasResponse);
  rpc TransferAlias(MsgTransferAlias) returns (MsgTransferAliasResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

// swagger:model MsgCreateWhoIs
message MsgCreateWhoIs {
  // Creator is the wallet address of the creator of the transaction.
  string creator = 1;

  // Secp256k1PublicKey is the public key of the creator.
  cosmos.crypto.secp256k1.PubKey pubkey = 2;

  // DidDocument is the DID document to be stored, in JSON format (see https://w3c-ccg.github.io/did-spec/#did-json-ld).
  bytes did_document = 3;

  // WhoIsType is the type of the WhoIs to be created. Possible values are: "USER", "APPLICATION".
  WhoIsType whois_type = 4;
}

message MsgCreateWhoIsResponse {
  // Did is the top level DID of the created WhoIs.
  bool success = 1;

  // WhoIs is the created WhoIs, contains the DID document and associated metadata.
  WhoIs who_is = 2;
}

message MsgUpdateWhoIs {
  // Creator is the wallet address of the creator of the transaction.
  string creator = 1;

  // DidDocument is the DID document to be stored, in JSON format (see https://w3c-ccg.github.io/did-spec/#did-json-ld).
  bytes did_document = 2;

  // Metadata is the metadata to be stored with the DID document.
  map<string, string> metadata = 3;
}

message MsgUpdateWhoIsResponse {
  // Did is the top level DID of the WhoIs.
  bool success = 1;

  // WhoIs is the created WhoIs, contains the DID document and associated metadata.
  WhoIs who_is = 2;
}

message MsgDeactivateWhoIs {
  // Creator is the wallet address of the creator of the transaction.
  string creator = 1;
}

message MsgDeactivateWhoIsResponse {
  // Success is true if the WhoIs was successfully deactivated.
  bool success = 1;

  // Did is the top level DID of the WhoIs.
  string did = 2;
}

message MsgBuyAlias {
  // Creator is the wallet address of the creator of the transaction.
  string creator = 1;

  // Name is the name of the alias app extension to be bought. i.e. example.snr/{name}
  string name = 2;
}

message MsgBuyAliasResponse {
  // Did is the top level DID of the WhoIs.
  bool success = 1;

  // WhoIs is the updated WhoIs, contains the DID document and associated metadata.
  WhoIs who_is = 2;
}

message MsgTransferAlias {
  // Creator is the wallet address of the creator of the transaction.
  string creator = 1;

  // Alias is the name of the user domain alias to be transferred to the recipient. i.e. {alias}.snr
  string alias = 2;

  // Recipient is the wallet address of the recipient of the alias.
  string recipient = 3;

  // Amount is the amount of the alias to be transferred.
  int32 amount = 4;
}

message MsgTransferAliasResponse {
  // Success is true if the Alias was successfully transferred.
  bool success = 1;

  // WhoIs is the updated WhoIs, contains the DID document and associated metadata.
  WhoIs who_is = 2;
}

message MsgSellAlias {
  // Creator is the wallet address of the creator of the transaction.
  string creator = 1;

  // Alias is the name of the app alias to be transferred to the recipient.  i.e. example.snr/{name}
  string alias = 2;

  // Amount is the amount of the alias to be transferred.
  int32 amount = 3;
}

message MsgSellAliasResponse {
  // Success is true if the Alias was successfully transferred.
  bool success = 1;

  // WhoIs is the updated WhoIs, contains the DID document and associated metadata.
  WhoIs who_is = 2;
}

// this line is used by starport scaffolding # proto/tx/message
