syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrio.motor.api.v1;

import "schema/v1/document.proto";
import "bucket/where_is.proto";
import "common/v1/info.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "schema/v1/schema.proto";

option go_package = "github.com/sonr-io/sonr/third_party/types/motor/api/v1";
option java_multiple_files = true;
option java_package = "io.sonr.types.motor";

// InitializeRequest is the request sent to the Initialize method to setup the motor node
message InitializeRequest {
  // Identifier of this Device
  string device_id = 1;

  // Device Home Directory
  string home_dir = 2;

  // Device Library Support Directory
  string support_dir = 3;

  // Device Temporary Storage Directory
  string temp_dir = 4;

  // Enable Libp2p Host
  bool enable_host = 5;

  // Enable Discovery Service
  bool enable_discovery = 6;

  // Enable Query Clients
  bool enable_query = 7;

  // Discovery Latitude
  double discovery_latitude = 8; //optional - Default: 40.673010 (Sonr HQ)

  // Discovery Longitude
  double discovery_longitude = 9; //optional - Default: -73.994450 (Sonr HQ)

  // Public Key used for Device Authentication as DID Controller
  common.v1.AuthInfo auth_info = 10; // optional

  // Application DID
  string app_did = 11; // optional
}

// CreateAccount Request contains the three keys needed to create an account on Sonr
message CreateAccountRequest {
  // The user specified password
  string password = 1;

  // The device generated random 32 byte key thats stored in secure storage
  bytes aes_dsc_key = 2;

  // Any additional data that needs to be stored in the account
  map<string, string> metadata = 3;
}

// Login requires the DID of the account being logged into, and optionally a password if the vault pw is being used. The PSK and DSC will be fetched from the keychain
message LoginRequest {
  // The DID of the account being logged into
  string did = 1;

  // The user specified password
  string password = 2;

  // The device generated random 32 byte key thats stored in secure storage
  bytes aes_dsc_key = 3;

  // The signed challenge from the Motor node also used for authentication
  bytes aes_psk_key = 4;
}

// QueryRequest is a generic request for querying the Motor node
message QueryRequest {
  // The query to be executed
  string query = 1;

  // The query entity type
  common.v1.EntityKind kind = 2;

  // The module to execute the query on
  common.v1.BlockchainModule module = 3;
}

// This is a request to issue a payment to a given account
message PaymentRequest {
  // Address of the account to send the payment to
  string to = 1;

  // Address of the account to send the payment from
  string from = 2;

  // Amount of the payment
  int64 amount = 3;

  // An optional note to be included in the payment
  string memo = 4;
}


// Query the blockchain for a specific WhoIs record for a DID
message QueryWhoIsRequest {
  // DID to query for
  string did = 1;
}

// A request to create a new schema definition on the blockchain
message CreateSchemaRequest {
  // A human readable name for the schema
  string label = 1;

  // The fields that make up the schema
  map<string, sonrio.sonr.schema.SchemaKind> fields = 2;

  // Any additional data that needs to be stored in the schema
  map<string, string> metadata = 3;
}

// A request to search for a WhatIs on the blockchain
message QueryWhatIsRequest {
  // The creator of the schema
  string creator = 1;

  // The did of the schema
  string did = 2;
}

// A request to return all schemas created by a given account
message QueryWhatIsByCreatorRequest {
  // The creator of the schemas
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// A request to query for a specific schema definition on the blockchain
message QuerySchemaRequest {
  // The creator of the schema
  string creator = 1;

  // The did of the schema
  string did = 2;
}

// A request to query for a bucket by user/bucket_did
message QueryWhereIsRequest {
  // The user that owns the bucket
  string creator = 1;

  // The did of the bucket
  string did = 2;
}

// A request to return all buckets created by a given account
message QueryWhereIsByCreatorRequest {
  // The creator of the buckets
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// A request to create a new bucket on the blockchain
message CreateBucketRequest {
  // The address of the bucket owner
  string creator = 1;

  // The name of the bucket
  string label = 2;

  // The public visibility of the bucket
  sonrio.sonr.bucket.BucketVisibility visibility = 3;

  // The role of the bucket owner
  sonrio.sonr.bucket.BucketRole role = 4;

  // The items that make up the bucket
  repeated sonrio.sonr.bucket.BucketItem content = 5;
}

// This message is used to update a bucket configuration
message UpdateBucketRequest {
  // The address of the account that owns the bucket
  string creator = 1;

  // The DID of the bucket
  string did = 2;

  // The human readable name of the bucket
  string label = 3;

  // The visibility of the bucket
  sonrio.sonr.bucket.BucketVisibility visibility = 4;

  // The role of the account making the request
  sonrio.sonr.bucket.BucketRole role = 5;

  // The items to be added to the bucket
  repeated sonrio.sonr.bucket.BucketItem content = 6;
}

// This request searches a bucket for a specific item
message SeachBucketContentBySchemaRequest {
  // Address of bucket owner
  string creator = 1;
  // bucket identifier
  string bucket_did = 2;
  // schema identifier
  string schema_did = 3;
}

message StatRequest {
}

message UploadDocumentRequest {
  string creator = 1;

  string label = 2;

  // The definition of the document used to build the values
  sonrio.sonr.schema.SchemaDefinition definition = 3;

  // the properties of this schemadocument
  repeated sonrio.sonr.schema.SchemaDocumentValue fields = 4;
}

message GetDocumentRequest {
  string cid = 1;
}
