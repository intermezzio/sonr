"use strict";(self.webpackChunksonr_docs=self.webpackChunksonr_docs||[]).push([[9907],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=d(a),u=i,m=h["".concat(s,".").concat(u)]||h[u]||p[u]||r;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},4709:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],l={title:"ADR-002",id:"adr-002",displayed_sidebar:"resourcesSidebar"},s="ADR-002: IPLD Objects With JOSE",d={unversionedId:"reference/adr-002",id:"reference/adr-002",title:"ADR-002",description:"hackmd-github-sync-badge",source:"@site/articles/reference/ADR-002.md",sourceDirName:"reference",slug:"/reference/adr-002",permalink:"/articles/reference/adr-002",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/articles/reference/ADR-002.md",tags:[],version:"current",frontMatter:{title:"ADR-002",id:"adr-002",displayed_sidebar:"resourcesSidebar"},sidebar:"resourcesSidebar",previous:{title:"ADR-001",permalink:"/articles/reference/adr-001"},next:{title:"ADR-003",permalink:"/articles/reference/adr-003"}},c={},p=[{value:"Summary",id:"summary",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Primer",id:"primer",level:2},{value:"Glossary",id:"glossary",level:2},{value:"<code>JSON Web Signature (JWS)</code>",id:"json-web-signature-jws",level:4},{value:"<code>JSON Web Encryption (JWE)</code>",id:"json-web-encryption-jwe",level:4},{value:"<code>JSON Web Key (JWK)</code>",id:"json-web-key-jwk",level:4},{value:"<code>Schema</code>",id:"schema",level:4},{value:"<code>Identity</code>",id:"identity",level:3},{value:"Objective",id:"objective",level:2},{value:"Changes From ADR-001",id:"changes-from-adr-001",level:2},{value:"Rename <strong>Object</strong> to <strong>Schema</strong>",id:"rename-object-to-schema",level:4},{value:"Client-Side Encryption with JOSE",id:"client-side-encryption-with-jose",level:2},{value:"Encryption",id:"encryption",level:3},{value:"Key Creation",id:"key-creation",level:4},{value:"Client",id:"client",level:4},{value:"Server",id:"server",level:4},{value:"Decrypting",id:"decrypting",level:3},{value:"Revoking Access",id:"revoking-access",level:3},{value:"A Note on the Vault",id:"a-note-on-the-vault",level:4},{value:"Adding Verification Methods",id:"adding-verification-methods",level:2},{value:"Schema Model",id:"schema-model",level:2},{value:"Did",id:"did",level:4},{value:"Label",id:"label",level:4},{value:"Fields",id:"fields",level:4},{value:"Object Model",id:"object-model",level:2},{value:"Content",id:"content",level:4},{value:"EncryptedJWKs",id:"encryptedjwks",level:4},{value:"Object Schema API (Blockchain)",id:"object-schema-api-blockchain",level:2},{value:"<code>CreateSchema(label, fields)</code>",id:"createschemalabel-fields",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Description",id:"description",level:4},{value:"<code>GetSchema()</code>",id:"getschema",level:3},{value:"Description",id:"description-1",level:4},{value:"<code>UploadObject(schemaDid, data, encryptedJwks)</code>",id:"uploadobjectschemadid-data-encryptedjwks",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Description",id:"description-2",level:4},{value:"<code>GetObject(cid)</code>",id:"getobjectcid",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Description",id:"description-3",level:4},{value:"WhoIs Updates",id:"whois-updates",level:2},{value:"DID Document Verification Definition",id:"did-document-verification-definition",level:2},{value:"IPLD Codec",id:"ipld-codec",level:3},{value:"IPLD Pathing",id:"ipld-pathing",level:3},{value:"DID Methods for CBOR-JOSE support",id:"did-methods-for-cbor-jose-support",level:2},{value:"Methods",id:"methods",level:2},{value:"Authenticate",id:"authenticate",level:3},{value:"Description",id:"description-4",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns",level:4},{value:"CreateJWS",id:"createjws",level:3},{value:"Params",id:"params",level:3},{value:"VerifyJWS",id:"verifyjws",level:3},{value:"Description",id:"description-5",level:3},{value:"Params",id:"params-1",level:3},{value:"IPLD Object Schema",id:"ipld-object-schema",level:2},{value:"DSL Representation of Object Schema",id:"dsl-representation-of-object-schema",level:2},{value:"CreateObjectSchema",id:"createobjectschema",level:2},{value:"PutObjectSchema",id:"putobjectschema",level:2},{value:"Implementation using IPLD Node Builder",id:"implementation-using-ipld-node-builder",level:3},{value:"GetObjectSchema",id:"getobjectschema",level:2},{value:"Function Signature",id:"function-signature",level:3},{value:"Implementation (string repersentation of schema)",id:"implementation-string-repersentation-of-schema",level:3},{value:"<code>AccessApp()</code>",id:"accessapp",level:2},{value:"<code>InteractObject()</code>",id:"interactobject",level:2},{value:"<code>ReadObject()</code>",id:"readobject",level:2}],h={toc:p};function u(e){var t=e.components,l=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adr-002-ipld-objects-with-jose"},"ADR-002: IPLD Objects With JOSE"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://hackmd.io/iomfscGXR1ycI_67NrLvMw"},(0,r.kt)("img",{parentName:"a",src:"https://hackmd.io/iomfscGXR1ycI_67NrLvMw/badge",alt:"hackmd-github-sync-badge"}))),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Implement Object Schemas based on ",(0,r.kt)("a",{parentName:"p",href:"https://ipld.io"},"IPLD")," which support ",(0,r.kt)("a",{parentName:"p",href:"https://jose.readthedocs.io/en/latest/"},"JOSE")," operations."),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"Objects on the Sonr network provide a way for users and applications to persist data.\nThe problem with modern software architectures is that the security of user data is not guaranteed\u2014a problem Sonr aims to solve with the help of JavaScript Object Signing and Encryption (JOSE)."),(0,r.kt)("p",null,"Additionally, today\u2019s software stack is not built with interoperability in mind.\nAn entire layer must be added to any application to support communication with other applications. IPLD provides a standard and decentralized way for any motor node to make use of the data stored on Sonr."),(0,r.kt)("p",null,"The combining of these technologies begets a system in which user data is always encrypted and can never be owned by one application, not even the application that created it."),(0,r.kt)("h2",{id:"primer"},"Primer"),(0,r.kt)("p",null,"The content of this ADR is based on the works of ADR-001 as well as a few core technologies\u2014all of which should be well understood before reading ADR-002. Here is a list of resources."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/articles/reference/adr-001"},"ADR-001")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://ipld.io/docs/intro/primer/"},"IPLD Primer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.ipfs.io/concepts/"},"IPFS Concepts"))),(0,r.kt)("h2",{id:"glossary"},"Glossary"),(0,r.kt)("h4",{id:"json-web-signature-jws"},(0,r.kt)("inlineCode",{parentName:"h4"},"JSON Web Signature (JWS)")),(0,r.kt)("p",null,"JavaScript Object Notation (JSON) data structure that represents a cryptographic key.\nThis specification also defines a JWK Set JSON data structure that represents a set of JWKs.\nCryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification."),(0,r.kt)("h4",{id:"json-web-encryption-jwe"},(0,r.kt)("inlineCode",{parentName:"h4"},"JSON Web Encryption (JWE)")),(0,r.kt)("p",null,"JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.\nCryptographic algorithms and identifiers\nfor use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification."),(0,r.kt)("h4",{id:"json-web-key-jwk"},(0,r.kt)("inlineCode",{parentName:"h4"},"JSON Web Key (JWK)")),(0,r.kt)("p",null,"A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.\nCryptographic algorithms and identifiers for use with this\nspecification are described in the separate JSON Web Algorithms (JWA)\nspecification and IANA registries established by that specification."),(0,r.kt)("h4",{id:"schema"},(0,r.kt)("inlineCode",{parentName:"h4"},"Schema")),(0,r.kt)("p",null,"A definition that outlines a structure for data to be stored within a persistence layer. These structures conform to a standard of ",(0,r.kt)("inlineCode",{parentName:"p"},"key value pairs")," where the ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," is a string and the value is one of a set number of ",(0,r.kt)("inlineCode",{parentName:"p"},"Types"),"."),(0,r.kt)("h3",{id:"identity"},(0,r.kt)("inlineCode",{parentName:"h3"},"Identity")),(0,r.kt)("p",null,"An identity is derived from the user's provided key upon registration."),(0,r.kt)("h2",{id:"objective"},"Objective"),(0,r.kt)("p",null,"The objective of ADR-002 is to define how Sonr manages the creation and access of data on its network. A proper solution must have these attributes."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Enable ",(0,r.kt)("em",{parentName:"li"},"motor")," nodes to store data on behalf of a user."),(0,r.kt)("li",{parentName:"ul"},"Enable devices which belong to the same user to access the same data."),(0,r.kt)("li",{parentName:"ul"},"Enable certain data to be shared with other users."),(0,r.kt)("li",{parentName:"ul"},"Allow for revoking access to both devices and other users."),(0,r.kt)("li",{parentName:"ul"},"Maintain that all data is encrypted in transit and at rest.")),(0,r.kt)("h2",{id:"changes-from-adr-001"},"Changes From ADR-001"),(0,r.kt)("p",null,"To accommodate the features proposed by ADR-002, a few changes to terminology will be made from ADR-001."),(0,r.kt)("h4",{id:"rename-object-to-schema"},"Rename ",(0,r.kt)("strong",{parentName:"h4"},"Object")," to ",(0,r.kt)("strong",{parentName:"h4"},"Schema")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Object")," in ADR-001 represents a type definition in Sonr. This name is misleading as it creates ambiguity between the type definition and the data which is of that type. With the addition of IPLD, the term ",(0,r.kt)("em",{parentName:"p"},"Schema")," will better express the concepts that were represented by ",(0,r.kt)("em",{parentName:"p"},"Object")," while creating consistency with the libraries we employ."),(0,r.kt)("h2",{id:"client-side-encryption-with-jose"},"Client-Side Encryption with JOSE"),(0,r.kt)("p",null,"A core principle of Sonr is to never let private user data pass unencrypted through the network. To achieve this, the ",(0,r.kt)("em",{parentName:"p"},"motor")," node must be responsible for encrypting and decrypting all data. This section describes how a user may securely store data on Sonr and maintain the ability to access that data from any ",(0,r.kt)("em",{parentName:"p"},"motor")," associated with his/her account."),(0,r.kt)("h3",{id:"encryption"},"Encryption"),(0,r.kt)("p",null,"In order for encrypted data to be accessed from multiple devices, there must be a ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Symmetric-key_algorithm"},"shared key")," for each piece of data that will be accessible to each ",(0,r.kt)("em",{parentName:"p"},"motor"),". "),(0,r.kt)("h4",{id:"key-creation"},"Key Creation"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://jose.readthedocs.io/en/latest/#jwk"},"JWK")," used during the encryption process is determined by the access levels for the data. As the owner of data, the user ",(0,r.kt)("inlineCode",{parentName:"p"},"bucket")," will contain a map of encrypted JWKs: ",(0,r.kt)("inlineCode",{parentName:"p"},"map[CID]map[PK]JWK")," ","[henceforth referenced to as the Object Encryption Key Map (OEKM)]","; where CID is the CID of the object, PK is the public key of a member who has access, and JWK is the JWK used to encrypt the data."),(0,r.kt)("p",null,"For objects shared with other users, the OEKM may exist in a dedicated bucket, but this is an implementation detail for the developer."),(0,r.kt)("h4",{id:"client"},"Client"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"An object is created using a ",(0,r.kt)("em",{parentName:"li"},"Schema"),"\u2014this is what will be stored."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("em",{parentName:"li"},"motor")," encrypts the data using its shared key for private data. If the data is meant to be shared with a party, a key specific to that party is used.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Any property in the data that is represented as a separate ",(0,r.kt)("em",{parentName:"li"},"Schema")," will be encrypted separately and included with the POST request."),(0,r.kt)("li",{parentName:"ul"},"Each encrypted ",(0,r.kt)("em",{parentName:"li"},"schema")," will also have a corresponding CID. Because CIDs are generated predictably, this will be computed by the ",(0,r.kt)("em",{parentName:"li"},"motor"),"."))),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("em",{parentName:"li"},"motor")," then creates a copy of the key it generated and encrypts it with each public key in the root-level DID. This is ultimately what allows another ",(0,r.kt)("em",{parentName:"li"},"motor")," to decrypt the data."),(0,r.kt)("li",{parentName:"ol"},"A request can now be crafted to Highway with the encrypted data and set of encrypted keys.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The request should include each encrypted ",(0,r.kt)("em",{parentName:"li"},"schema")," along with the list of encrypted shared keys.")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.figma.com/file/URTnRygutbDRaSK0swKVyV/Reading%2FWriting-Encrypted-User-Data?node-id=190%3A148"},(0,r.kt)("img",{alt:"Writing encrypted data",src:a(3492).Z,width:"1275",height:"828"}))),(0,r.kt)("h4",{id:"server"},"Server"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When a request is received, each object is added to IPFS."),(0,r.kt)("li",{parentName:"ol"},"The CID for each object will be verified, creating an error if one does not match."),(0,r.kt)("li",{parentName:"ol"},"If successful, each CID is added to a record on-chain. Alternatively, each CID may be be part of a bucket update and not stored individually on-chain.")),(0,r.kt)("h3",{id:"decrypting"},"Decrypting"),(0,r.kt)("p",null,"The process for decrypting data becomes simple with the above provisions. The ",(0,r.kt)("em",{parentName:"p"},"motor")," will first obtain the shared key\u2014accessible via the ",(0,r.kt)("em",{parentName:"p"},"vault")," (more on that later)\u2014which will be used to encrypt data fetched through IPFS. The entire process is as follows."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Fetch the shared key and decrypt it.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The shared key will have already been added to the ",(0,r.kt)("em",{parentName:"li"},"vault")," by the uploading device. This process is outlined in the next section."))),(0,r.kt)("li",{parentName:"ol"},"Through IPFS, fetch the relevant data via CID. Then, fetch each referenced CID in the result. Continue this process until all objects have been recovered."),(0,r.kt)("li",{parentName:"ol"},"Decrypt each object using the shared key."),(0,r.kt)("li",{parentName:"ol"},"Compose the original ",(0,r.kt)("em",{parentName:"li"},"schema")," by replacing the IPLD Link with the referenced object.")),(0,r.kt)("h3",{id:"revoking-access"},"Revoking Access"),(0,r.kt)("p",null,"If any device or party is to have its access revoked, a new key must be used for the next update to that object. This means the process for revoking access is to simply upload the object again, with the revoked party omitted from the OEKM."),(0,r.kt)("h4",{id:"a-note-on-the-vault"},"A Note on the Vault"),(0,r.kt)("p",null,"Each user on Sonr will have a bucket created for them when they create an account, known as their ",(0,r.kt)("em",{parentName:"p"},"vault"),". The vault acts as a collection of all the user's personal keys or private data. Buckets and vaults will be covered in great detail in ADR-003."),(0,r.kt)("h2",{id:"adding-verification-methods"},"Adding Verification Methods"),(0,r.kt)("p",null,"The process of securing user data starts with the verification method. Simply put, verification methods are a member of the DID Document which contain the public keys used for authentication. New verification methods can be added in order for a user to authenticate with new or different keys. Later sections will detail how these methods are used to create JWKs for secure data storage."),(0,r.kt)("p",null,"The important thing to note about Verification Methods in ADR-002 is that the process for adding a Verification Method must now include encrypting all shared keys again with the new method\u2019s public key."),(0,r.kt)("h2",{id:"schema-model"},"Schema Model"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"schema")," added to Sonr will have the following format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go="},"type Schema struct {\n    Did string\n    Label string\n    Fields map[string]SchemaKind\n}\n\ntype SchemaKind int32\n\nconst (\n    SchemaKind_Invalid SchemaKind = iota\n    SchemaKind_Map\n    SchemaKind_List\n    SchemaKind_Unit\n    SchemaKind_Bool\n    SchemaKind_Int\n    SchemaKind_Float\n    SchemaKind_String\n    SchemaKind_Bytes\n    SchemaKind_Link\n    SchemaKind_Struct\n    SchemaKind_Union\n    SchemaKind_Enum\n    SchemaKind_Any\n)\n")),(0,r.kt)("h4",{id:"did"},"Did"),(0,r.kt)("p",null,"The DID that uniquely identifies the Schema."),(0,r.kt)("h4",{id:"label"},"Label"),(0,r.kt)("p",null,"A name for this schema."),(0,r.kt)("h4",{id:"fields"},"Fields"),(0,r.kt)("p",null,"A list of properties for this schema.\nThe property types are defined as ",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaKind"),"."),(0,r.kt)("h2",{id:"object-model"},"Object Model"),(0,r.kt)("p",null,"Object data on Sonr will be encrypted, but IPFS will contain a wrapper of that data containing some additional metadata."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go="},"type Object struct {\n    Content []byte\n    EncryptedJWKs map[PublicKey]EncryptedJWK\n}\n\ntype PublicKey string\ntype EncryptedJWK string\n")),(0,r.kt)("h4",{id:"content"},"Content"),(0,r.kt)("p",null,"The raw content of this object. May be encrypted with a JWK."),(0,r.kt)("h4",{id:"encryptedjwks"},"EncryptedJWKs"),(0,r.kt)("p",null,"A mapping of each public key that has access to the data with the JWK encrypted with said public key."),(0,r.kt)("h2",{id:"object-schema-api-blockchain"},"Object Schema API (Blockchain)"),(0,r.kt)("p",null,"The following methods will be added to support creating Schemas and Objects."),(0,r.kt)("h3",{id:"createschemalabel-fields"},(0,r.kt)("inlineCode",{parentName:"h3"},"CreateSchema(label, fields)")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"label (string)"),"\n: The label for the Schema. Must be alphanumeric and without whitespace."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fields (map[string]int32)"),"\n: The properties to be included in the Schema. Each key must be alphanumeric and without whitespace. The value is an integer corresponding to a ",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaKind"),"."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Creates a ",(0,r.kt)("em",{parentName:"p"},"schema")," for use throughout Sonr."),(0,r.kt)("p",null,"Creating a ",(0,r.kt)("em",{parentName:"p"},"schema")," requires a DID and DID Document to be created. "),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The model itself will be stored in IPFS, while the DID-CID pair is stored on-chain.")),(0,r.kt)("h3",{id:"getschema"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetSchema()")),(0,r.kt)("h4",{id:"description-1"},"Description"),(0,r.kt)("p",null,"Returns the schema. Requires no blockchain transactions."),(0,r.kt)("h3",{id:"uploadobjectschemadid-data-encryptedjwks"},(0,r.kt)("inlineCode",{parentName:"h3"},"UploadObject(schemaDid, data, encryptedJwks)")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"schemaDid (string)"),"\n: The DID of the schema this object adheres to."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"data ([]byte)"),"\n: The raw data to be added to IPFS. This can be plaintext or encrypted with the user's root JWK."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"encryptedJwks (map[PK]JWK)"),"\n: A map of encrypted JWKs for anyone who should have access to the data. Each JWK must be encrypted with the PK of the shared party."),(0,r.kt)("h4",{id:"description-2"},"Description"),(0,r.kt)("p",null,"Uploads raw data and adds to it IPFS. A CID is returned for addressing the content."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"There is no blockchain interactions with this call.")),(0,r.kt)("h3",{id:"getobjectcid"},(0,r.kt)("inlineCode",{parentName:"h3"},"GetObject(cid)")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cid (string)"),"\nThe CID which addresses the content on IPFS."),(0,r.kt)("h4",{id:"description-3"},"Description"),(0,r.kt)("p",null,"Returns the object previously uploaded to IPFS, including the map of JWKs. The map can be used to look up and decrypt the appropraite JWK in order to read the data."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This call requires no blockchain interaction.")),(0,r.kt)("h2",{id:"whois-updates"},"WhoIs Updates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// Metadata attached associated with the document\n// data is arbitrary, and thus user specified.\nMetadata map[string]string\n")),(0,r.kt)("h2",{id:"did-document-verification-definition"},"DID Document Verification Definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// Connected Motors Webauthn credentials get stored as verificationMethod\n{\n  "verificationMethod": [\n    {\n      // Set to Motor Nodes Wallet Address\n      "controller": "did:snr:123",\n\n      // Id of Key set to unique value and operating system/architecture\n      "id": "did:snr:123#ios-arm64-1",\n\n      // JWK generated from WebAuthN Credential\n      "publicKeyJwk": {\n        "crv": "P-256",\n        "kty": "EC",\n        "x": "UANQ8pgvJT33JbrnwMiu1L1JCGQFOEm1ThaNAJcFrWA=",\n        "y": "UWm6q5n1iXyeCJLMGDInN40bkkKr8KkoTWDqJBZQXRo="\n      },\n      "type": "JsonWebKey2020"\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"ipld-codec"},"IPLD Codec"),(0,r.kt)("p",null,"DAG-JOSE is a codec that implements the IPLD Data Model as a subset of ",(0,r.kt)("inlineCode",{parentName:"p"},"JOSE"),", which complies with the ",(0,r.kt)("inlineCode",{parentName:"p"},"DAG-CBOR"),' specication. Some additional constraints for hash consistent representations. DAG-CBOR also adds a "link" type using a CBOR tag to bring it in line with the IPLD ',(0,r.kt)("a",{parentName:"p",href:"https://ipld.io/glossary/#data-model"},"Data Model"),". ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ceramicnetwork/go-dag-jose"},"go implementation")),(0,r.kt)("h3",{id:"ipld-pathing"},"IPLD Pathing"),(0,r.kt)("p",null,'Paths are composed of a series of segments, and each segment is an instruction on how to navigate deeper into the filesystem. With filesystems, each step is over a "directory" and leads you to either a "file" or another "directory"; for IPLD, each step is over a "node" and leads you to another "node"!'),(0,r.kt)("h2",{id:"did-methods-for-cbor-jose-support"},"DID Methods for CBOR-JOSE support"),(0,r.kt)("p",null,"The following methods will need to be implemented within ",(0,r.kt)("strong",{parentName:"p"},"sonr-io/sonr/pkg/did")," for DAG-JOSE support for Sonr DID Documents."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Authenticate"),(0,r.kt)("li",{parentName:"ul"},"CreateJWS"),(0,r.kt)("li",{parentName:"ul"},"DecryptJWE"),(0,r.kt)("li",{parentName:"ul"},"EnctyptJWE"),(0,r.kt)("li",{parentName:"ul"},"VerifyJWS")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Models")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CreateJWSOptions {\n    did: string\n    protected: map[string]interface{} (optional)\n    linkedBlock: string (optional)\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DagJWS = {\n  payload: string\n  signatures: []JWSSignature\n  link: CID (optional)\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"VerifyJWSOptions {\n  atTime: Date (optional)\n\n  disableTimecheck: boolean (optional)\n\n  issuer: string (optional)\n\n  capability: Cacao (optional)\n\n  revocationPhaseOutSecs: number (optional)\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"EncryptJWE {\n    cleartext: []byte,\n    recipients: []string,\n    protectedHeader: map[string]interface{}\n    aad: []byte (optional)\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DecryptJWEOptions {\n  did: string (optional)\n}\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"authenticate"},"Authenticate"),(0,r.kt)("h4",{id:"description-4"},"Description"),(0,r.kt)("p",null,"DID Authentication communicates with the remote origin of DID document to gain the ",(0,r.kt)("inlineCode",{parentName:"p"},"JWS")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"siganture"),". Said ",(0,r.kt)("inlineCode",{parentName:"p"},"JWS")," is then ",(0,r.kt)("inlineCode",{parentName:"p"},"verified"),".\nthe following operations are important for proper authentication compliance"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Check the returned ",(0,r.kt)("inlineCode",{parentName:"li"},"kid")," includes the did from the verification payload."),(0,r.kt)("li",{parentName:"ul"},"Check experation of the signature")),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"provider")," - DIDProvider.\n",(0,r.kt)("strong",{parentName:"p"},"paths")," - didUrl(s) to authenticate\n",(0,r.kt)("strong",{parentName:"p"},"aud")," - Audience (JWS claim)"),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,"A JWS with general serialization containing the following properties:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nonce"),"\n: The random string which was given as a challenge"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"did"),"\n: The DID which authentication was given for"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"paths"),"\n: The paths which was given permission for"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"exp"),"\n: Unix timestamp after which the JWS should be considered invalid."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"aud"),"\n: optional audience for the JWS, should match the domain which made the request."),(0,r.kt)("h3",{id:"createjws"},"CreateJWS"),(0,r.kt)("p",null,"Generates a JSON web signature object composed of a multi signature key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "link": {\n        "/": "bafybeig6xv5nwphfmvcnektpnojts33jqcuam7bmye2pb54adnrtccjlsu"\n    },\n    "payload": "AXASIN69ets85WVE0ipva5M5b2mAqAZ8LME08PeAG2MxCSuV",\n    "signatures": [\n        {\n            "protected": "eyJhbGciOiJFUzI1NksifQ",\n            "signature": "SiYGXW7Yi-KxbpIlLNmu0lEhrayV7ypaAC49GAcQ_qpTstZW89Mz6Cp8VlUEX-qVsgYjc-9-1zvLcDYlxOsr1g"\n        },\n        {\n            "protected": "eyJhbGciOiJFUzI1NksifQ",\n            "signature": "Q8PdTE5A5N3a0ktO2wNdUymumHlSxNF9Si38IvzsMaSZC63yQw-bJNpKf-UeJFPH7cDzY7jLg2G_viejp7NqXg"\n        }\n    ]\n}\n\n')),(0,r.kt)("h3",{id:"params"},"Params"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"payload"),"\n: The payload to sign, json object or base64url encoded string."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"protected"),"\n: The protected header, json object."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"did"),"\n: The DID that should sign the message, may include the key, fragment."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"revocable"),"\n: Makes the JWS revocable when rotating keys, boolean default to false"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"DAGJws")),(0,r.kt)("h3",{id:"verifyjws"},"VerifyJWS"),(0,r.kt)("h3",{id:"description-5"},"Description"),(0,r.kt)("p",null,"We can compute the ",(0,r.kt)("inlineCode",{parentName:"p"},"SHA-256")," representation if the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"secret")," is present within the generated token. Upon querying for an ecrypted entry within ipfs, the DID controller of said object should be able to ",(0,r.kt)("inlineCode",{parentName:"p"},"verify")," the signature as it should be aware of valid signatures relating to itself."),(0,r.kt)("h3",{id:"params-1"},"Params"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"jws"),"\n: signature to verify"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"options"),"\n: VeriftyJWSOptions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("h1",{id:"object-schemas"},"Object Schemas"),(0,r.kt)("h2",{id:"ipld-object-schema"},"IPLD Object Schema"),(0,r.kt)("p",null,"IPLD represents data types which can be stored in IPFS nodes as \u201cKinds\u201d the following are types which \u201cKinds\u201d support:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"boolean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"integer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"float")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"map")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bytes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"link"))),(0,r.kt)("p",null,"Kinds in IPLD are similar to data types supported within \u201cJSON\u201d but also add \u201cbytes\u201d and \u201clink\u201d where link maps to \u201cCID\u201d type."),(0,r.kt)("h2",{id:"dsl-representation-of-object-schema"},"DSL Representation of Object Schema"),(0,r.kt)("p",null,"Node builders allow you to declare schema within an object representation that then can be transformed to various types. Builders then can be represented in DSL which is a declarative syntax for IPLD schemas similar to JSON.  The following is a method stub for creating an object schema for later usage."),(0,r.kt)("h2",{id:"createobjectschema"},"CreateObjectSchema"),(0,r.kt)("p",null,"Creation of an object will define a schema for objects to be later stored in IPFS. ",(0,r.kt)("inlineCode",{parentName:"p"},"Schemas")," define the shape of data for a given object."),(0,r.kt)("h2",{id:"putobjectschema"},"PutObjectSchema"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"func (i *IPFSProtocol) PutObjectSchema(doc *ot.ObjectDoc) (*cid.Cid, error)")),(0,r.kt)("h3",{id:"implementation-using-ipld-node-builder"},"Implementation using IPLD Node Builder"),(0,r.kt)("p",null,"Stores a DSL representation of a defined object schema with the following relationship denoting a property of the persistent schema."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{\n    Label: string\n    Type: Kind\n}\n")),(0,r.kt)("p",null,"This object will be stored within an aggregate (array structure) within the ObjectDoc and should be iterated over and stored within a node builder, then serialized to a byte representation."),(0,r.kt)("h2",{id:"getobjectschema"},"GetObjectSchema"),(0,r.kt)("h3",{id:"function-signature"},"Function Signature"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"func (i *IPFSProtocol) GetObjectSchema(cid *CID) (Node, error)")),(0,r.kt)("h3",{id:"implementation-string-repersentation-of-schema"},"Implementation (string repersentation of schema)"),(0,r.kt)("p",null,"Instead of using a ",(0,r.kt)("inlineCode",{parentName:"p"},"node builder")," to build our schema up from a tree of related objects, the schema structured can be ",(0,r.kt)("inlineCode",{parentName:"p"},"loaded")," from a string repersentation of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ipld")," schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\'\n    {\n        "foo": string,\n        "baz": {\n            "prop": integer\n        }\n    }\n\'\n')),(0,r.kt)("p",null,"The above repersentation can be serialized to a Byte Array, and loaded as a static schema structure. Therefore, we can then store this structure as a schema for schemas as the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n"schema": []byte,\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"schema"),"\n: Schema decleration as an array of bytes."),(0,r.kt)("h1",{id:"interaction-methods-for-highway-to-motor-communication"},"Interaction Methods for Highway to Motor Communication"),(0,r.kt)("p",null,"The following are interface methods that should be defined on ",(0,r.kt)("inlineCode",{parentName:"p"},"Host")," and implemented for Host targets."),(0,r.kt)("h2",{id:"accessapp"},(0,r.kt)("inlineCode",{parentName:"h2"},"AccessApp()")),(0,r.kt)("p",null,"User authenticates a Registered Application on Sonr with their DID Based Multisignature key for all their devices. Creates a new Bucket inside the User bucket for the newly provisioned Application."),(0,r.kt)("h2",{id:"interactobject"},(0,r.kt)("inlineCode",{parentName:"h2"},"InteractObject()")),(0,r.kt)("p",null,"Maps user defined object to a ",(0,r.kt)("inlineCode",{parentName:"p"},"object schema"),". Which is then pushed to a bucket. "),(0,r.kt)("h2",{id:"readobject"},(0,r.kt)("inlineCode",{parentName:"h2"},"ReadObject()")),(0,r.kt)("p",null,"This method begins the request process for reading the individual object values of another User's app bucket. Provisioned users will automatically get access (if they called RequestBucket already) and unprovisioned users will send the RequestBucket to the corresponding peer."))}u.isMDXComponent=!0},3492:function(e,t,a){t.Z=a.p+"assets/images/writing-encrypted-data-adr-2-d14034625257e95572ab1d0a17594959.png"}}]);