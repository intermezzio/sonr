"use strict";(self.webpackChunksonr_docs=self.webpackChunksonr_docs||[]).push([[5413],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1563:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={title:"ADR-004 (WIP)",id:"adr-004",displayed_sidebar:"resourcesSidebar"},s="ADR-004: Realtime Data Channels (WIP)",c={unversionedId:"reference/adr-004",id:"reference/adr-004",title:"ADR-004 (WIP)",description:"hackmd-github-sync-badge",source:"@site/articles/reference/ADR-004.md",sourceDirName:"reference",slug:"/reference/adr-004",permalink:"/articles/reference/adr-004",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/articles/reference/ADR-004.md",tags:[],version:"current",frontMatter:{title:"ADR-004 (WIP)",id:"adr-004",displayed_sidebar:"resourcesSidebar"},sidebar:"resourcesSidebar",previous:{title:"ADR-003 (WIP)",permalink:"/articles/reference/adr-003"},next:{title:"ADR-005 (WIP)",permalink:"/articles/reference/adr-005"}},d={},p=[{value:"Abstract",id:"abstract",level:2},{value:"Primer",id:"primer",level:2},{value:"<code>multiaddr</code>",id:"multiaddr",level:3},{value:"<code>pub-sub</code>",id:"pub-sub",level:3},{value:"Objective",id:"objective",level:2},{value:"Addressing &amp; Identifiying Topics",id:"addressing--identifiying-topics",level:2},{value:"Topics",id:"topics",level:3},{value:"Protocols",id:"protocols",level:3},{value:"Client Side Interaction",id:"client-side-interaction",level:2},{value:"<code>ListenChannel()</code>",id:"listenchannel",level:3},{value:"<code>PublishChannel()</code>",id:"publishchannel",level:3},{value:"CRUD Methods",id:"crud-methods",level:2},{value:"<code>CreateChannel</code>",id:"createchannel",level:3},{value:"<code>UpdateChannel</code>",id:"updatechannel",level:3},{value:"<code>DeleteChannel</code>",id:"deletechannel",level:3},{value:"Sequence Diagrams",id:"sequence-diagrams",level:2},{value:"TO-DO",id:"to-do",level:3},{value:"References",id:"references",level:3}],u={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adr-004-realtime-data-channels-wip"},"ADR-004: Realtime Data Channels (WIP)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://hackmd.io/iomfscGXR1ycI_67NrLvMw"},(0,i.kt)("img",{parentName:"a",src:"https://hackmd.io/iomfscGXR1ycI_67NrLvMw/badge",alt:"hackmd-github-sync-badge"}))),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"The fundamental communication component across all Sonr nodes is the ",(0,i.kt)("inlineCode",{parentName:"p"},"channel"),". By utilizing data and transport agnostic realtime streams between nodes, we effectively have realtime structured data transmission at any point in the world."),(0,i.kt)("h2",{id:"primer"},"Primer"),(0,i.kt)("p",null,"The Sonr channel implementation requires prior knowledge of the following definitions before implementation."),(0,i.kt)("h3",{id:"multiaddr"},(0,i.kt)("inlineCode",{parentName:"h3"},"multiaddr")),(0,i.kt)("p",null,"Multiaddr's are self describing addresses that operate on any network protocol. They provide human-readable and efficient machine-readable representations. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/multiformats/multiaddr"},"The multiaddr spec")," by protocol labs provides further details about the mechanism."),(0,i.kt)("h3",{id:"pub-sub"},(0,i.kt)("inlineCode",{parentName:"h3"},"pub-sub")),(0,i.kt)("p",null,"The Sonr implementation follows the standard publish/subscribe model present with the modern web, with the caveat that it operates on a peer-to-peer node. In particular Sonr utilizes the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.libp2p.io/concepts/publish-subscribe/"},"gossip-sub implementation specification")," to manage sending messages between peers on the network."),(0,i.kt)("h2",{id:"objective"},"Objective"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An Open transport agnostic communication mechanism"),(0,i.kt)("li",{parentName:"ul"},"Accessibility for users to listen to channels based on application"),(0,i.kt)("li",{parentName:"ul"},"A mechanism for developers to create channels for their individual development needs"),(0,i.kt)("li",{parentName:"ul"},"Structured Object reperesentation as the payload body between messages, as specified in ",(0,i.kt)("a",{parentName:"li",href:"http://docs.sonr.io/articles/reference/adr-002"},"ADR-002"))),(0,i.kt)("h2",{id:"addressing--identifiying-topics"},"Addressing & Identifiying Topics"),(0,i.kt)("p",null,"In Sonr the name of a channel follows the ",(0,i.kt)("inlineCode",{parentName:"p"},"multiaddr")," specification for individual protocols that operate for a specific application. When resolving a ",(0,i.kt)("inlineCode",{parentName:"p"},"DIDDocument")," of a particular application, developers are also provided a list of channels present for the application under its Service endpoint property."),(0,i.kt)("h3",{id:"topics"},"Topics"),(0,i.kt)("p",null,"Topics in the Sonr channel mechanism are defined as Developer created persistent stream endpoints where users can join and are always ensured to return pre-defined structured data, as per ",(0,i.kt)("a",{parentName:"p",href:"http://docs.sonr.io/articles/reference/adr-002"},"ADR-002"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Topic Name Representation")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"/sonr/[application-name]/[version]/[topicName]")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example Topic Identifier")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"/sonr/beam/v1/exampleGroupChat")),(0,i.kt)("h3",{id:"protocols"},"Protocols"),(0,i.kt)("p",null,"Protocols in the Sonr channel mechanism are defined as pre-packaged spec-compliant functionality, accessible to both users to interact and developers to leverage. For example one of the provided core protocols by the Sonr Team is our ",(0,i.kt)("a",{parentName:"p",href:"https://archive.fosdem.org/2020/schedule/event/dip_p2p_matrix/"},"Libp2p Matrix Integration"),"."),(0,i.kt)("h2",{id:"client-side-interaction"},"Client Side Interaction"),(0,i.kt)("p",null,"The following methods are provided by Sonr's client-side Motor package, to be leveraged by frontends powered by the Sonr ecosystem."),(0,i.kt)("h3",{id:"listenchannel"},(0,i.kt)("inlineCode",{parentName:"h3"},"ListenChannel()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"(GET): /v1/channel/{topicName}\n- topicName:string\n")),(0,i.kt)("p",null,"When a channel has succesfully been routed and verified, the client is returned a ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamHandler")," that reads the incoming data from the given channel. The user is automatically disconnected from the channel when the ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamHandler")," is cancelled."),(0,i.kt)("h3",{id:"publishchannel"},(0,i.kt)("inlineCode",{parentName:"h3"},"PublishChannel()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"(POST): /v1/channel/{topicName}\n- topicName:string\n- body:buffer\n")),(0,i.kt)("p",null,"Calling a post method to the endpoint results in the client posting a message to the underlying ",(0,i.kt)("inlineCode",{parentName:"p"},"PubSub")," topic. The message will successfully publish to the channel if the provided body message correctly maps to the ",(0,i.kt)("inlineCode",{parentName:"p"},"DID")," and object reference involved with the channel."),(0,i.kt)("h2",{id:"crud-methods"},"CRUD Methods"),(0,i.kt)("h3",{id:"createchannel"},(0,i.kt)("inlineCode",{parentName:"h3"},"CreateChannel")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"(POST): /v1/channel/create\n- Creator:string\n- Label:string\n- Description:string\n- RegisteredObject:sonrio.sonr.object.ObjectDoc\n")),(0,i.kt)("p",null,"This method is utilized to create a new Channel definition for an application powered by the Sonr network. The method requires the creator, label for human-readable representation, description for the functionality of the channel, and a registered object for defining what structured data is returned by the channel."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    type : "tx/MsgCreateChannel",\n    body: {\n        "code": 200,\n        "did": "did:snr:abc123",\n        "channel": {\n            "label": "test",\n            "description": "A example channel",\n            "registeredObject": [...] // See ADR-002\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"updatechannel"},(0,i.kt)("inlineCode",{parentName:"h3"},"UpdateChannel")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"(POST): /v1/channel/update\n- Creator:string\n- Label:string\n- Description:string\n- RegisteredObject:sonrio.sonr.object.ObjectDoc\n")),(0,i.kt)("p",null,"This method is utilized by a developer to update an existing configuration of a channel."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    type : "tx/MsgUpdateChannel",\n    body: {\n        "code": 200,\n        "did": "did:snr:abc123",\n        "channel": {\n            "label": "test",\n            "description": "A example channel",\n            "registeredObject": [...] // See ADR-002\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"deletechannel"},(0,i.kt)("inlineCode",{parentName:"h3"},"DeleteChannel")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"(POST): /v1/channel/delete\n- Creator:string\n- Label:string\n")),(0,i.kt)("p",null,"This method is utilized by developers to effectively eliminate any existing structured channel representation for a given application."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    type : "tx/MsgDeleteChannel",\n    body: {\n        "code": 200,\n        "did": "did:snr:abc123",\n    }\n}\n')),(0,i.kt)("h2",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,i.kt)("p",null,"WIP"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"to-do"},"TO-DO"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Motor Interaction methods for ",(0,i.kt)("inlineCode",{parentName:"li"},"Channel")),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Developer CRUD methods for ",(0,i.kt)("inlineCode",{parentName:"li"},"x/channel")),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Protocol based topic identifiers for ",(0,i.kt)("inlineCode",{parentName:"li"},"x/channel")),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Remove ",(0,i.kt)("inlineCode",{parentName:"li"},"x/channel")," and make the Genesis object for Channels a ",(0,i.kt)("inlineCode",{parentName:"li"},"List"))),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.libp2p.io/concepts/publish-subscribe/"},"Libp2p Pubsub")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/multiformats/multiaddr"},"MultiAddr Specification")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://localhost:3000/articles/reference/adr-003"},"Sonr ADR-003"))))}h.isMDXComponent=!0}}]);