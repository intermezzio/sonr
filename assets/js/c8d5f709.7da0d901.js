"use strict";(self.webpackChunksonr_docs=self.webpackChunksonr_docs||[]).push([[4555],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,k=u["".concat(o,".").concat(h)]||u[h]||p[h]||i;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:a,l[1]=d;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8090:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],d={title:"ADR-003",id:"adr-003",displayed_sidebar:"resourcesSidebar"},o="ADR-003: Buckets",c={unversionedId:"reference/adr-003",id:"reference/adr-003",title:"ADR-003",description:"Summary",source:"@site/articles/reference/ADR-003.md",sourceDirName:"reference",slug:"/reference/adr-003",permalink:"/articles/reference/adr-003",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/articles/reference/ADR-003.md",tags:[],version:"current",frontMatter:{title:"ADR-003",id:"adr-003",displayed_sidebar:"resourcesSidebar"},sidebar:"resourcesSidebar",previous:{title:"ADR-002",permalink:"/articles/reference/adr-002"},next:{title:"ADR-004",permalink:"/articles/reference/adr-004"}},s={},p=[{value:"Summary",id:"summary",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Objectives",id:"objectives",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Concept",id:"concept",level:2},{value:"Bucket Model",id:"bucket-model",level:2},{value:"DID",id:"did",level:4},{value:"Label",id:"label",level:4},{value:"IsActive",id:"isactive",level:4},{value:"EncryptedJwks",id:"encryptedjwks",level:4},{value:"Content",id:"content",level:4},{value:"Bucket API",id:"bucket-api",level:2},{value:"<code>CreateBucket(label)</code>",id:"createbucketlabel",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Description",id:"description",level:4},{value:"<code>UpdateLabel(did, new_label)</code>",id:"updatelabeldid-new_label",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Description",id:"description-1",level:4},{value:"<code>AddContent(did, name, encryptedContent, sharedMembersEncryptedKey)</code>",id:"addcontentdid-name-encryptedcontent-sharedmembersencryptedkey",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Description",id:"description-2",level:4},{value:"<code>UpdateContent(did, name, encryptedContent, sharedMembersEncryptedKeys)</code>",id:"updatecontentdid-name-encryptedcontent-sharedmembersencryptedkeys",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Description",id:"description-3",level:4},{value:"<code>RemoveContent(did, name)</code>",id:"removecontentdid-name",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Description",id:"description-4",level:4},{value:"<code>DeactivateBucket(did)</code>",id:"deactivatebucketdid",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Description",id:"description-5",level:4},{value:"<code>GetBucket(did)</code>",id:"getbucketdid",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Description",id:"description-6",level:4},{value:"<code>BucketExists(did)</code>",id:"bucketexistsdid",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Description",id:"description-7",level:4}],u={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adr-003-buckets"},"ADR-003: Buckets"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Associate data on the Sonr network together with the addition of a new resource type: buckets."),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"The canonical storage resource inside the Sonr network is the ",(0,i.kt)("strong",{parentName:"p"},"Bucket")," - an encrypted, schemaless, storage container.\nBy using buckets, developers may leverage a secure and private decentralized storage layer for their applications."),(0,i.kt)("h2",{id:"objectives"},"Objectives"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Private and secure storage mechanism"),(0,i.kt)("li",{parentName:"ul"},"Support Access Control Lists"),(0,i.kt)("li",{parentName:"ul"},"Support CRUD operations for buckets and bucket content"),(0,i.kt)("li",{parentName:"ul"},"Support revokation of access")),(0,i.kt)("h2",{id:"use-cases"},"Use Cases"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Store multiple associated files (application assets)"),(0,i.kt)("li",{parentName:"ul"},"Store staticly served files")),(0,i.kt)("h2",{id:"concept"},"Concept"),(0,i.kt)("p",null,"Conceptually, buckets behave similarly to a key-value store, where the keys are developer-created and mapped one-to-one with a CID.\nThe content is encrypted using the shared member's JWKs (JSON Web Keys)."),(0,i.kt)("p",null,"Creating and managing buckets require updates to the underlying blockchain.\nThis includes deleting the bucket, adding new resources, or updating permissions.\nThe bucket model itself is stored in IPFS, but the CID for the model will be stored on-chain; this significantly reduces the usage of on-chain space."),(0,i.kt)("h2",{id:"bucket-model"},"Bucket Model"),(0,i.kt)("p",null,"The model for a bucket, which will be stored in IPFS, is as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go="},"type Bucket struct {\n    Did string\n    Label string\n    IsActive bool\n    EncryptedJwks map[CID]map[PublicKey]EncryptedJWK\n    Content map[string]CID\n}\n\ntype CID string\ntype PublicKey string\ntype EncryptedJWK []byte\n")),(0,i.kt)("h4",{id:"did"},"DID"),(0,i.kt)("p",null,"A DID which uniquely identifies the bucket."),(0,i.kt)("h4",{id:"label"},"Label"),(0,i.kt)("p",null,"A label for conveniently referencing the bucket."),(0,i.kt)("h4",{id:"isactive"},"IsActive"),(0,i.kt)("p",null,"Reflects whether or not the bucket is active.\nInactive buckets cannot be modified."),(0,i.kt)("h4",{id:"encryptedjwks"},"EncryptedJwks"),(0,i.kt)("p",null,"A map that stores the encrypted keys for each party who should have access to the content referenced by a CID.\nEach CID entry contains a map of public keys (those of the members being granted access) to the JWK encrypted with that public key (PK). This allows the user to find the JWK they need to decrypt the data found with ",(0,i.kt)("inlineCode",{parentName:"p"},"CID"),"."),(0,i.kt)("h4",{id:"content"},"Content"),(0,i.kt)("p",null,"Maps developer-defined keys to the CID for content. Content is posted via the APIs described below and can be found again via this map."),(0,i.kt)("h2",{id:"bucket-api"},"Bucket API"),(0,i.kt)("p",null,"At a high-level, the supported Bucket operations are:"),(0,i.kt)("h3",{id:"createbucketlabel"},(0,i.kt)("inlineCode",{parentName:"h3"},"CreateBucket(label)")),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"label (string)"),"\n: The label for the bucket. A convenient way to reference the bucket in addition to the generated DID."),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"Provisions a new bucket with the given label. New buckets will be initialized with a corresponding DID and DID Document. The ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"encryptedJwks")," fields will be empty."),(0,i.kt)("p",null,"The bucket model itself will be persisted via IPFS, while the DID Document and a record which references the newly created bucket will be stored on-chain."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Data persisted via IPFS will incur a storage cost relative to the size of the data storage.\nAdditonal costs will be incurred for storing the bucket reference on the chain.")),(0,i.kt)("h3",{id:"updatelabeldid-new_label"},(0,i.kt)("inlineCode",{parentName:"h3"},"UpdateLabel(did, new_label)")),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"did (string)"),"\n: The DID of the bucket to update."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"new_label (string)"),"\n: The new label for the bucket."),(0,i.kt)("h4",{id:"description-1"},"Description"),(0,i.kt)("p",null,"Updates the label for the given bucket DID. Updating a label requires updating the bucket model in IPFS, which in turn will require an on-chain transaction to update the DID-CID pair."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Data persisted to IPFS as part of an update will incur a storage cost that is linked to the size of the changed files.\nIPFS will persist all files, so any files with changes will need to be re-uploaded, as well as the bucket model.\nThe changes will need to persist to the chain incurring an additional cost.")),(0,i.kt)("h3",{id:"addcontentdid-name-encryptedcontent-sharedmembersencryptedkey"},(0,i.kt)("inlineCode",{parentName:"h3"},"AddContent(did, name, encryptedContent, sharedMembersEncryptedKey)")),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"did (string)"),"\n: The did of the bucket to add content to."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name (string)"),"\n: The key used to reference the content being added. This will be addressable via DID URL."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"encryptedContent (string)"),"\n: The content to be added, encrypted with a JWK. The JWK should be one known only to the parties included in ",(0,i.kt)("inlineCode",{parentName:"p"},"sharedMembersEncryptedKeys"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"sharedMembersEncryptedKeys (map[string]string)"),"\n: A map containing the JWK used for encrypting the content, encrypted with the public key of each party to share with."),(0,i.kt)("h4",{id:"description-2"},"Description"),(0,i.kt)("p",null,"Adds encrypted content to an existing bucket.\nA JWK is used to encrypt the content, and that JWK is encrypted once for every user who should have access to it.\nThis enables data to be securely stored and access to be securely distributed."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This call will require a new DID-CID pair to be added to the chain and as such will incur a cost.\nAdditionally, this will charge for the cost of the file storage on IPFS")),(0,i.kt)("h3",{id:"updatecontentdid-name-encryptedcontent-sharedmembersencryptedkeys"},(0,i.kt)("inlineCode",{parentName:"h3"},"UpdateContent(did, name, encryptedContent, sharedMembersEncryptedKeys)")),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"did (string)"),"\n: The did of the bucket to update content on."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name (string)"),"\n: The key used to reference the content being updated. The updated CID will replace the value found at this name."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"encryptedContent (string)"),"\n: The new content, encrypted with a JWK. The JWK should be one known only to the parties included in ",(0,i.kt)("inlineCode",{parentName:"p"},"sharedMembersEncryptedKeys"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"sharedMembersEncryptedKey (map[string]string)"),"\n: A map containing the JWK used for encrypting the content, encrypted with the public key of each party to share with."),(0,i.kt)("h4",{id:"description-3"},"Description"),(0,i.kt)("p",null,"Updates a bucket's content at the given name. The CID generated for the updated content will replace the CID found under ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," in the content map.\nA new entry into the encrypted key map for ",(0,i.kt)("inlineCode",{parentName:"p"},"sharedMembersEncryptedKey"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This update will require a new DID-CID pair written to the chain.\nThis change will charge for the size of the new entry on IPFS as well as CID on-chain update")),(0,i.kt)("h3",{id:"removecontentdid-name"},(0,i.kt)("inlineCode",{parentName:"h3"},"RemoveContent(did, name)")),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"did (string)"),"\n: The did of the bucket to update content on."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name (string)"),"\n: The content name."),(0,i.kt)("h4",{id:"description-4"},"Description"),(0,i.kt)("p",null,"Removes content from a bucket.\nThis does not delete content from IPFS, but it removes the entry in the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," map and ",(0,i.kt)("inlineCode",{parentName:"p"},"encryptedJwks")," and map."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Removing content, like updating, requires a single transaction on chain for updating the DID-CID pair for this bucket.")),(0,i.kt)("h3",{id:"deactivatebucketdid"},(0,i.kt)("inlineCode",{parentName:"h3"},"DeactivateBucket(did)")),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"did (string)"),"\n: The bucket's DID."),(0,i.kt)("h4",{id:"description-5"},"Description"),(0,i.kt)("p",null,"Sets the bucket's ",(0,i.kt)("inlineCode",{parentName:"p"},"IsActive")," field to false. Requires a transaction on-chain to update the DID-CID pair."),(0,i.kt)("h3",{id:"getbucketdid"},(0,i.kt)("inlineCode",{parentName:"h3"},"GetBucket(did)")),(0,i.kt)("h4",{id:"parameters-6"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"did (string)"),"\n: The bucket's DID."),(0,i.kt)("h4",{id:"description-6"},"Description"),(0,i.kt)("p",null,"Returns the bucket model for the given DID. No transactions on-chain are required."),(0,i.kt)("h3",{id:"bucketexistsdid"},(0,i.kt)("inlineCode",{parentName:"h3"},"BucketExists(did)")),(0,i.kt)("h4",{id:"parameters-7"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"did (string)"),"\n: The bucket's DID."),(0,i.kt)("h4",{id:"description-7"},"Description"),(0,i.kt)("p",null,"Checks if a bucket exists for a given DID. No transactions on-chain are required."))}h.isMDXComponent=!0}}]);