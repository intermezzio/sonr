"use strict";(self.webpackChunksonr_docs=self.webpackChunksonr_docs||[]).push([[9907],{3905:function(e,t,i){i.d(t,{Zo:function(){return c},kt:function(){return u}});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=d(i),u=a,m=h["".concat(l,".").concat(u)]||h[u]||p[u]||o;return i?n.createElement(m,r(r({ref:t},c),{},{components:i})):n.createElement(m,r({ref:t},c))}));function u(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,r=new Array(o);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var d=2;d<o;d++)r[d]=i[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},4709:function(e,t,i){i.r(t),i.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var n=i(7462),a=i(3366),o=(i(7294),i(3905)),r=["components"],s={title:"ADR-002",id:"adr-002",displayed_sidebar:"resourcesSidebar"},l="ADR-002: IPLD Objects With JOSE (WIP)",d={unversionedId:"reference/adr-002",id:"reference/adr-002",title:"ADR-002",description:"hackmd-github-sync-badge",source:"@site/articles/reference/ADR-002.md",sourceDirName:"reference",slug:"/reference/adr-002",permalink:"/articles/reference/adr-002",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/articles/reference/ADR-002.md",tags:[],version:"current",frontMatter:{title:"ADR-002",id:"adr-002",displayed_sidebar:"resourcesSidebar"},sidebar:"resourcesSidebar",previous:{title:"ADR-001",permalink:"/articles/reference/adr-001"},next:{title:"ADR-003 - WIP",permalink:"/articles/reference/adr-003"}},c={},p=[{value:"Summary",id:"summary",level:2},{value:"Abstract",id:"abstract",level:2},{value:"Primer",id:"primer",level:2},{value:"Objective",id:"objective",level:2},{value:"Changes From ADR-001",id:"changes-from-adr-001",level:2},{value:"Rename <strong>Object</strong> to <strong>Schema</strong>",id:"rename-object-to-schema",level:3},{value:"Client Side Encryption with JOSE",id:"client-side-encryption-with-jose",level:2},{value:"Encryption",id:"encryption",level:3},{value:"Client",id:"client",level:4},{value:"Server",id:"server",level:4},{value:"Decrypting",id:"decrypting",level:4},{value:"Revoking Access",id:"revoking-access",level:4},{value:"Adding Verification Methods",id:"adding-verification-methods",level:2},{value:"WhoIs Definition",id:"whois-definition",level:2},{value:"DID Document Verification Definition",id:"did-document-verification-definition",level:2},{value:"<code>verificationMethod()</code>",id:"verificationmethod",level:3},{value:"<code>controller()</code>",id:"controller",level:3},{value:"Identity Verification",id:"identity-verification",level:2},{value:"Identity Verification Flow Diagrams",id:"identity-verification-flow-diagrams",level:2},{value:"Changes to interfaces for Object encryption",id:"changes-to-interfaces-for-object-encryption",level:2},{value:"AddSignedObjects",id:"addsignedobjects",level:3},{value:"AddEncryptedObject",id:"addencryptedobject",level:3},{value:"IPLD Codec",id:"ipld-codec",level:3},{value:"Node Pathing",id:"node-pathing",level:3},{value:"IPLD Object Schema",id:"ipld-object-schema",level:2},{value:"DSL Representation of Object Schema",id:"dsl-representation-of-object-schema",level:2},{value:"Diagram",id:"diagram",level:2},{value:"DID Methods for CBOR-JOSE support",id:"did-methods-for-cbor-jose-support",level:2},{value:"Authenticate",id:"authenticate",level:2},{value:"CreateJWS",id:"createjws",level:3},{value:"VeriftyJWS",id:"veriftyjws",level:3},{value:"Interaction Methods for Highway to Motor communication",id:"interaction-methods-for-highway-to-motor-communication",level:2},{value:"<code>AccessApp()</code>",id:"accessapp",level:3},{value:"<code>InteractObject()</code>",id:"interactobject",level:3},{value:"<code>ListenChannel()</code>",id:"listenchannel",level:3},{value:"<code>LinkDevice()</code>",id:"linkdevice",level:3},{value:"<code>LinkPeer()</code>",id:"linkpeer",level:3},{value:"<code>ReadBucket()</code>",id:"readbucket",level:3},{value:"<code>ReadObject()</code>",id:"readobject",level:3},{value:"<code>RequestBucket()</code>",id:"requestbucket",level:3},{value:"<code>RespondBucket()</code>",id:"respondbucket",level:3},{value:"TODO",id:"todo",level:2}],h={toc:p};function u(e){var t=e.components,i=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,n.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"adr-002-ipld-objects-with-jose-wip"},"ADR-002: IPLD Objects With JOSE (WIP)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://hackmd.io/xsLr2WpNS9Sffm2EvdPNzA"},(0,o.kt)("img",{parentName:"a",src:"https://hackmd.io/xsLr2WpNS9Sffm2EvdPNzA/badge",alt:"hackmd-github-sync-badge"}))),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Implement Objects based on ",(0,o.kt)("a",{parentName:"p",href:"https://ipld.io"},"IPLD")," which support ",(0,o.kt)("a",{parentName:"p",href:"https://jose.readthedocs.io/en/latest/"},"JOSE")," operations."),(0,o.kt)("h2",{id:"abstract"},"Abstract"),(0,o.kt)("p",null,"Objects on the Sonr network provide a way for users and applications to persist data. The problem with modern software architectures is that the security of user data is not guaranteed\u2014a problem Sonr aims to solve with the help of JavaScript Object Signing and Encryption (JOSE)."),(0,o.kt)("p",null,"Additionally, today\u2019s software stack is not built with interoperability in mind. An entire layer must be added to any application in order to support communication with other applications. IPLD provides a standard and decentralized way for any motor node to make use of the data stored on Sonr."),(0,o.kt)("p",null,"The combining of these technologies begets a system in which user data is always encrypted and can never be owned by one application, even when that application created it."),(0,o.kt)("h2",{id:"primer"},"Primer"),(0,o.kt)("p",null,"The content of this ADR is based on the works of ADR-001 as well as a few core technologies\u2014all of which should be well understood before reading ADR-002. Here is a list of resources."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.sonr.io/articles/reference/adr-001"},"ADR-001")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://ipld.io/docs/intro/primer/"},"IPLD Primer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.ipfs.io/concepts/"},"IPFS Concepts"))),(0,o.kt)("h2",{id:"objective"},"Objective"),(0,o.kt)("p",null,"The objective of ADR-002 is to define the way in which Sonr manages the creation and access of data on its network. A proper solution must have these attributes."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Enable ",(0,o.kt)("em",{parentName:"li"},"motor")," nodes to store data on behalf of a user."),(0,o.kt)("li",{parentName:"ul"},"Enable devices which belong to the same user to access the same data."),(0,o.kt)("li",{parentName:"ul"},"Enable certain data to be shared with other users."),(0,o.kt)("li",{parentName:"ul"},"Allow for revoking access to both devices and other users."),(0,o.kt)("li",{parentName:"ul"},"Maintain that all data is encrypted in transit and at rest.")),(0,o.kt)("h2",{id:"changes-from-adr-001"},"Changes From ADR-001"),(0,o.kt)("p",null,"To accommodate the features proposed by ADR-002, a few changes to terminology will be made from ADR-001."),(0,o.kt)("h3",{id:"rename-object-to-schema"},"Rename ",(0,o.kt)("strong",{parentName:"h3"},"Object")," to ",(0,o.kt)("strong",{parentName:"h3"},"Schema")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Object")," in ADR-001 represents a type definition in Sonr. This name is misleading as it creates ambiguity between the type definition and the data which is of that type. With the addition of IPLD, the term ",(0,o.kt)("em",{parentName:"p"},"Schema")," will better represent what today\u2019s ",(0,o.kt)("em",{parentName:"p"},"Object")," truly is while creating consistency with the libraries we employ."),(0,o.kt)("h2",{id:"client-side-encryption-with-jose"},"Client Side Encryption with JOSE"),(0,o.kt)("p",null,"A core principle of Sonr is for private user data never to pass unencrypted through the network. To achieve this, the ",(0,o.kt)("em",{parentName:"p"},"motor")," node must be responsible for encrypting and decrypting all data. This section describes how a user may securely store data on Sonr and maintain the ability to access that data from any ",(0,o.kt)("em",{parentName:"p"},"motor")," associated with his/her account."),(0,o.kt)("h3",{id:"encryption"},"Encryption"),(0,o.kt)("p",null,"In order for encrypted data to be accessed from multiple devices, there must be a ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Symmetric-key_algorithm"},"shared key")," for each piece of data which will be accessible to each ",(0,o.kt)("em",{parentName:"p"},"motor"),". The high-level process for storing some data looks like this.",(0,o.kt)("strong",{parentName:"p"}," \\\nKey Creation")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://jose.readthedocs.io/en/latest/#jwk"},"JWK")," used during the encryption process is determined by the access levels for the data. As the owner of data, your vault will contain a map of CID to map of PK to encrypted JWK\u2014",(0,o.kt)("inlineCode",{parentName:"p"},"map[CID]map[PK]JWK"),"; where CID is the CID of the object, PK is the public key of a member who has access, and JWK is the JWK used to encrypt the data (encrypted with PK)."),(0,o.kt)("h4",{id:"client"},"Client"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"An object is created using a ",(0,o.kt)("em",{parentName:"li"},"Schema"),"\u2014this is what will be stored."),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("em",{parentName:"li"},"motor")," encrypts the data using its shared key for private data. If the data is meant to be shared with a party, a key specific to that party is used.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Any property in the data that is represented as a separate ",(0,o.kt)("em",{parentName:"li"},"Schema")," will be encrypted separately and included with the POST request."),(0,o.kt)("li",{parentName:"ol"},"Each encrypted ",(0,o.kt)("em",{parentName:"li"},"schema")," will also have a corresponding CID. Because CIDs are generated in a predictable way, this will be computed by the ",(0,o.kt)("em",{parentName:"li"},"motor"),"."))),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("em",{parentName:"li"},"motor _then creates a copy of the key it generated and encrypts it with each public key in the root-level DID. This is ultimately what allows another _motor")," to decrypt the data."),(0,o.kt)("li",{parentName:"ol"},"A request can now be crafted to Highway with the encrypted data and set of encrypted keys.\n3. The request should include each encrypted ",(0,o.kt)("em",{parentName:"li"},"schema")," along with the list of encrypted shared keys.")),(0,o.kt)("h4",{id:"server"},"Server"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"When a request is received, each object is added to IPFS."),(0,o.kt)("li",{parentName:"ol"},"The CID for each object will be verified, creating an error if one does not match."),(0,o.kt)("li",{parentName:"ol"},"If successful, each CID is added to a record on-chain.")),(0,o.kt)("h4",{id:"decrypting"},"Decrypting"),(0,o.kt)("p",null,"The process for decrypting data becomes simple with the above provisions. The ",(0,o.kt)("em",{parentName:"p"},"motor")," will first obtain the shared key\u2014accessible via the ",(0,o.kt)("em",{parentName:"p"},"vault")," (more on that later)\u2014which will be used to encrypt data fetched through IPFS. The entire process is as follows."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Fetch the shared key and decrypt it.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"The shared key will have already been added to the ",(0,o.kt)("em",{parentName:"li"},"vault")," by the uploading device. This process is outlined in the next section."))),(0,o.kt)("li",{parentName:"ol"},"Through IPFS, fetch the relevant data via CID. For each referenced CID in the result, fetch that CID. Continue this process until all objects have been recovered."),(0,o.kt)("li",{parentName:"ol"},"Decrypt each object using the shared key."),(0,o.kt)("li",{parentName:"ol"},"Compose the original ",(0,o.kt)("em",{parentName:"li"},"schema")," by replacing the IPLD Link with the referenced object.")),(0,o.kt)("h4",{id:"revoking-access"},"Revoking Access"),(0,o.kt)("p",null,"If any device or party is to have its access revoked, a new key must be used for the next write to that document."),(0,o.kt)("h2",{id:"adding-verification-methods"},"Adding Verification Methods"),(0,o.kt)("p",null,"The process of securing user data starts with the verification method. Simply put, verification methods are a member of the DID Document which contain the public keys used for authentication. New verification methods can be added in order for a user to authenticate with new or different keys. Later sections will detail how these methods are used to create JWKs for secure data storage."),(0,o.kt)("p",null,"The important thing to note about Verification Methods in ADR-002 is that the process for adding a Verification Method must now include encrypting all shared keys again with the new method\u2019s public key."),(0,o.kt)("h2",{id:"whois-definition"},"WhoIs Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'type WhoIs struct {\n   // Alias is the list of registered `alsoKnownAs` identifiers of the User or Application\n   Alias []*Alias `protobuf:"bytes,1,rep,name=alias,proto3" json:"alias,omitempty"`\n\n   // Owner is the top level DID of the User or Application derived from the multisignature wallet.\n   Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`\n\n   // DIDDocument is the bytes representation of DIDDocument within the WhoIs. Initially marshalled as JSON.\n   DidDocument []byte `protobuf:"bytes,3,opt,name=did_document,json=didDocument,proto3" json:"did_document,omitempty"`\n\n   // Credentials are the biometric info of the registered name and account encoded with public key\n   Controllers []string `protobuf:"bytes,4,rep,name=controllers,proto3" json:"controllers,omitempty"`\n\n   // Type is the kind of the entity. Possible values are: "user", "application"\n   Type WhoIsType `protobuf:"varint,5,opt,name=type,proto3,enum=sonrio.sonr.registry.WhoIsType" json:"type,omitempty"`\n\n   // Timestamp is the time of the last update of the DID Document\n   Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`\n\n   // IsActive is the status of the DID Document\n   IsActive bool `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`\n}\n\n')),(0,o.kt)("h2",{id:"did-document-verification-definition"},"DID Document Verification Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'// Connected Motors Webauthn credentials get stored as verificationMethod\n  "verificationMethod": [\n    {\n      // Set to Motor Nodes Wallet Address\n      "controller": "did:snr:123",\n\n      // Id of Key set to unique value and operating system/architecture\n      "id": "did:snr:123#ios-arm64-1",\n\n      // JWK generated from WebAuthN Credential\n      "publicKeyJwk": {\n        "crv": "P-256",\n        "kty": "EC",\n        "x": "UANQ8pgvJT33JbrnwMiu1L1JCGQFOEm1ThaNAJcFrWA=",\n        "y": "UWm6q5n1iXyeCJLMGDInN40bkkKr8KkoTWDqJBZQXRo="\n      },\n      "type": "JsonWebKey2020"\n    }\n  ]\n\n')),(0,o.kt)("h3",{id:"verificationmethod"},(0,o.kt)("inlineCode",{parentName:"h3"},"verificationMethod()")),(0,o.kt)("p",null,"This property is utilized for storing the individual Motor WebAuthn credentials. This mechanism is put into place to associate users by individual devices opposed to strictly an account based structure."),(0,o.kt)("h3",{id:"controller"},(0,o.kt)("inlineCode",{parentName:"h3"},"controller()")),(0,o.kt)("p",null,"Currently, the controller represents the set of DIDs associated with the top-level document for a User. In order for the controller to be valid an accompanying entry must be present in the verificationMethod and must conform to the",(0,o.kt)("a",{parentName:"p",href:"https://fidoalliance.org/fido2/fido2-web-authentication-webauthn/"}," FIDO2 WebAuthn")," specification."),(0,o.kt)("h2",{id:"identity-verification"},"Identity Verification"),(0,o.kt)("p",null,"Each identity is unique to the user and derived from the public key credential given by ",(0,o.kt)("a",{parentName:"p",href:"https://fidoalliance.org/fido2/fido2-web-authentication-webauthn/"},"Webauthn"),". The Json Web Key (JWK) must be derived from the Credential provided by the User registration operation. When a user is registered on Sonr. A Credential from the authenticated device will be provided, which derives from the JWK. These are unique per device and will be included within the \u201cVerificationMethod '' array in the did model. This relationship is a 1 to many as to accommodate many devices registered to a single Identity."),(0,o.kt)("h2",{id:"identity-verification-flow-diagrams"},"Identity Verification Flow Diagrams"),(0,o.kt)("iframe",{src:"https://drive.google.com/file/d/1Sf1V4Uq2ELdhk8_BC89WqFi8xwcUShmN/preview",width:"640",height:"480",allow:"autoplay"}),(0,o.kt)("iframe",{src:"https://drive.google.com/file/d/16m1C_UnHARnkY_4waBe-keOWBzO-3T65/preview",width:"640",height:"480",allow:"autoplay"}),(0,o.kt)("iframe",{src:"https://drive.google.com/file/d/1-ATocCNPyDOq7mZMoQqAyYcRmg8NESJ8/preview",width:"640",height:"480",allow:"autoplay"}),(0,o.kt)("h2",{id:"changes-to-interfaces-for-object-encryption"},"Changes to interfaces for Object encryption"),(0,o.kt)("p",null,"The following methods need to be added to the Highway IPFS proto implementation. Object encryption within the IPFS specification relies on JOSE encryption specification. Below are the data models used from encrypting object data to be stored within an IPFS node: ",(0,o.kt)("a",{parentName:"p",href:"https://ipld.io/specs/codecs/dag-jose/spec/"},"see here")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"sonr-io/core/ipfs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"* AddSignedObject\n* Implement IPLD Codec\n* DAG Mechanism\n* AddEncryptedObject\n* Follow Secret Path\n")),(0,o.kt)("h3",{id:"addsignedobjects"},"AddSignedObjects"),(0,o.kt)("p",null,"Objects stored as a node within the highway IPFS storage need to be encrypted using JOSE JWK."),(0,o.kt)("p",null,"See section DID METHODS"),(0,o.kt)("h3",{id:"addencryptedobject"},"AddEncryptedObject"),(0,o.kt)("p",null,"Objects signed with a public key credential will then be encrypted using their private key on the given Motor Node  and persisted to our IPFS server. Objects will first have their \u201cSchema\u201d looked up and stored, if there is an error in encoding the data to the given schema (type definition) an error of \u201cinternal error\u201d or 500 code will be sent back in the message response to the user."),(0,o.kt)("h3",{id:"ipld-codec"},"IPLD Codec"),(0,o.kt)("p",null,'DAG-CBOR is a codec that implements the IPLD Data Model as a subset of CBOR, plus some additional constraints for hash consistent representations. DAG-CBOR also adds a "link" type using a CBOR tag, to bring it in line with the IPLD ',(0,o.kt)("a",{parentName:"p",href:"https://ipld.io/glossary/#data-model"},"Data Model"),"."),(0,o.kt)("h3",{id:"node-pathing"},"Node Pathing"),(0,o.kt)("p",null,'Paths are composed of a series of segments, and each segment is an instruction on how to navigate deeper into the filesystem. With filesystems, each step is over a "directory" and leads you to either a "file" or another "directory"; for IPLD, each step is over a "node" and leads you to another "node"!'),(0,o.kt)("h2",{id:"ipld-object-schema"},"IPLD Object Schema"),(0,o.kt)("p",null,"IPLD represents data types which can be stored in IPFS nodes as \u201cKinds\u201d the following are types which \u201cKinds\u201d support:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"boolean")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"integer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"float")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"map")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"list")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"string")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"null")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bytes")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"link"))),(0,o.kt)("p",null,"Kinds in IPLD are similar to data types supported within \u201cJSON\u201d but also add \u201cbytes\u201d and \u201clink\u201d where link maps to \u201cCID\u201d type."),(0,o.kt)("h2",{id:"dsl-representation-of-object-schema"},"DSL Representation of Object Schema"),(0,o.kt)("p",null,"Node builders allow you to declare schema within an object representation that then can be transformed to various types. Builders then can be represented in DSL which is an declarative syntax for IPLD schemas similar to JSON.  The following is a method stub for creating an object schema for later usage:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"func (i *IPFSProtocol) PutObjectSchema(doc *ot.ObjectDoc) (*cid.Cid, error)")),(0,o.kt)("p",null,"The above method stores an DSL representation of a defined object schema with the following relationship denoting a property of the persistent schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n    Label: string\n    Type: Kind\n}\n")),(0,o.kt)("p",null,"This object will be stored within a aggregate (array structure) within the ObjectDoc and should be iterated over and stored within a node builder, then serialized to a byte representation."),(0,o.kt)("h2",{id:"diagram"},"Diagram"),(0,o.kt)("iframe",{src:"https://drive.google.com/file/d/1Sf1V4Uq2ELdhk8_BC89WqFi8xwcUShmN/preview",width:"640",height:"480",allow:"autoplay"}),(0,o.kt)("h2",{id:"did-methods-for-cbor-jose-support"},"DID Methods for CBOR-JOSE support"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"sonr-io/core/did")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Authenticate"),(0,o.kt)("li",{parentName:"ul"},"CreateJWS"),(0,o.kt)("li",{parentName:"ul"},"DecryptJWE"),(0,o.kt)("li",{parentName:"ul"},"EnctyptJWE"),(0,o.kt)("li",{parentName:"ul"},"VerifyJWS"),(0,o.kt)("li",{parentName:"ul"},"VerifyJWS")),(0,o.kt)("h2",{id:"authenticate"},"Authenticate"),(0,o.kt)("p",null,"We must verify the controller\u2019s (device) credential and verify with the controller\u2019s verification method by utilizing the public key method within the verification object. Once the given key has been verified, the requester will be given a jwt, and be then verified as authenticated."),(0,o.kt)("h3",{id:"createjws"},"CreateJWS"),(0,o.kt)("p",null,"Generates a JSON web signature object composed of a multi signature key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n    "link": {\n        "/": "bafybeig6xv5nwphfmvcnektpnojts33jqcuam7bmye2pb54adnrtccjlsu"\n    },\n    "payload": "AXASIN69ets85WVE0ipva5M5b2mAqAZ8LME08PeAG2MxCSuV",\n    "signatures": [\n        {\n            "protected": "eyJhbGciOiJFUzI1NksifQ",\n            "signature": "SiYGXW7Yi-KxbpIlLNmu0lEhrayV7ypaAC49GAcQ_qpTstZW89Mz6Cp8VlUEX-qVsgYjc-9-1zvLcDYlxOsr1g"\n        },\n        {\n            "protected": "eyJhbGciOiJFUzI1NksifQ",\n            "signature": "Q8PdTE5A5N3a0ktO2wNdUymumHlSxNF9Si38IvzsMaSZC63yQw-bJNpKf-UeJFPH7cDzY7jLg2G_viejp7NqXg"\n        }\n    ]\n}\n\n')),(0,o.kt)("h3",{id:"veriftyjws"},"VeriftyJWS"),(0,o.kt)("p",null,"We can compute SHA-256 representation if secret is present within the generated token."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Encoded JOSE types (IPLD schema)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\ntype EncodedSignature struct {\n  header optional {String:Any}\n  protected optional Bytes\n  signature Bytes\n}\n\ntype EncodedRecipient struct {\n  encrypted_key optional Bytes\n  header optional {String:Any}\n}\n\ntype EncodedJWE struct {\n  aad optional Bytes\n  ciphertext Bytes\n  iv optional Bytes\n  protected optional Bytes\n  recipients [EncodedRecipient]\n  tag optional Bytes\n  unprotected optional {String:Any}\n}\n\ntype EncodedJWS struct {\n  payload optional Bytes\n  signatures [EncodedSignature]\n}\n")),(0,o.kt)("h2",{id:"interaction-methods-for-highway-to-motor-communication"},"Interaction Methods for Highway to Motor communication"),(0,o.kt)("p",null,"The following are interface methods for communication between our Highway and Motor nodes"),(0,o.kt)("h3",{id:"accessapp"},(0,o.kt)("inlineCode",{parentName:"h3"},"AccessApp()")),(0,o.kt)("p",null,"User authenticates a Registered Application on Sonr with their DID Based Multisignature key for all their devices. Creates a new Bucket inside the User bucket for the newly provisioned Application."),(0,o.kt)("h3",{id:"interactobject"},(0,o.kt)("inlineCode",{parentName:"h3"},"InteractObject()")),(0,o.kt)("p",null,"Users map the new data for a specific type definition presented in the UI, and push the updated data to the corresponding application in their Bucket. This utilizes the JWE process in order to encrypt data from the User end."),(0,o.kt)("h3",{id:"listenchannel"},(0,o.kt)("inlineCode",{parentName:"h3"},"ListenChannel()")),(0,o.kt)("p",null,"User specifies which application data stream to begin reading for data. The returned channel is a listenable stream or callback depending on Device architecture."),(0,o.kt)("h3",{id:"linkdevice"},(0,o.kt)("inlineCode",{parentName:"h3"},"LinkDevice()")),(0,o.kt)("p",null,"This method allows motor based applications to link an additional WebAuthN credential to their top-level DID Document."),(0,o.kt)("h3",{id:"linkpeer"},(0,o.kt)("inlineCode",{parentName:"h3"},"LinkPeer()")),(0,o.kt)("p",null,"Establishes a linkage between two \u201cpeer\u201d nodes to establish another node in the network."),(0,o.kt)("h3",{id:"readbucket"},(0,o.kt)("inlineCode",{parentName:"h3"},"ReadBucket()")),(0,o.kt)("p",null,"This method pulls Application Specific buckets type definitions, functions, etc. In order to render the payloads onto the frontend UI."),(0,o.kt)("h3",{id:"readobject"},(0,o.kt)("inlineCode",{parentName:"h3"},"ReadObject()")),(0,o.kt)("p",null,"This method begins the request process for reading the individual object values of another User's app bucket. Provisioned users will automatically get access (if they called RequestBucket already) and unprovisioned users will send the RequestBucket to the corresponding peer."),(0,o.kt)("h3",{id:"requestbucket"},(0,o.kt)("inlineCode",{parentName:"h3"},"RequestBucket()")),(0,o.kt)("p",null,"This method is utilized for accessing another user's application specific data holistically. This would be utilized for full access to a peers App Data config"),(0,o.kt)("h3",{id:"respondbucket"},(0,o.kt)("inlineCode",{parentName:"h3"},"RespondBucket()")),(0,o.kt)("p",null,"This method is utilized for responding to a request from another user from the mailbox folder in their User specific bucket."),(0,o.kt)("h2",{id:"todo"},"TODO"),(0,o.kt)("ul",{className:"contains-task-list"},(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Show updated WhoIs model"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Describe interaction between IPFS (or ambiguous data storage layer) and IPLD model.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The JSON API that is Highway will need a codec to encode posted data before storage in IPFS"),(0,o.kt)("li",{parentName:"ul"},"Need to consider how this will work with the encryption. How might selectors and paths of IPLD traverse encrypted data? Can IPLD encoding be done in motor?"))),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","IPLD Object definition"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Describe new process for adding verification methods"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Required methods to be added to highway (for use in motor lib)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Get all symmetric keys"),(0,o.kt)("li",{parentName:"ul"},"When adding a new verification method, this data will be required so that all existing symmetric encryption keys can be re-encrypted for the new device.")))))}u.isMDXComponent=!0}}]);