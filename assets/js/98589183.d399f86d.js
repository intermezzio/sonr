"use strict";(self.webpackChunksonr_docs=self.webpackChunksonr_docs||[]).push([[8680],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,f=p["".concat(l,".").concat(h)]||p[h]||u[h]||s;return n?a.createElement(f,r(r({ref:t},d),{},{components:n})):a.createElement(f,r({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7069:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var a=n(7462),o=n(3366),s=(n(7294),n(3905)),r=["components"],i={title:"5. NFT Standard",id:"adr-005",displayed_sidebar:"resourcesSidebar"},l="ADR-005: Non-Fungible Token Standard for Objects",c={unversionedId:"architecture/adr-005",id:"architecture/adr-005",title:"5. NFT Standard",description:"Abstract",source:"@site/posts/architecture/5.md",sourceDirName:"architecture",slug:"/architecture/adr-005",permalink:"/posts/architecture/adr-005",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/posts/architecture/5.md",tags:[],version:"current",frontMatter:{title:"5. NFT Standard",id:"adr-005",displayed_sidebar:"resourcesSidebar"},sidebar:"resourcesSidebar",previous:{title:"4. Channels",permalink:"/posts/architecture/adr-004"},next:{title:"6. Functions",permalink:"/posts/architecture/adr-006"}},d={},u=[{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"1. What is a Non-Fungible Token",id:"1-what-is-a-non-fungible-token",level:3},{value:"1.1 How Non-Fungible Tokens will Work on the Sonr Ecosystem",id:"11-how-non-fungible-tokens-will-work-on-the-sonr-ecosystem",level:3},{value:"1.2 How Non-Fungible Tokens will be utilized to create a consumer-focused Market",id:"12-how-non-fungible-tokens-will-be-utilized-to-create-a-consumer-focused-market",level:3},{value:"1.3 How Non-Fungible Tokens can interact with the ecosystem",id:"13-how-non-fungible-tokens-can-interact-with-the-ecosystem",level:3},{value:"2. How will Non-Fungible Tokens be purchased, sold &amp; transferred on the Sonr blockchain",id:"2-how-will-non-fungible-tokens-be-purchased-sold--transferred-on-the-sonr-blockchain",level:3},{value:"2.1 Base of the CW721 Specification",id:"21-base-of-the-cw721-specification",level:3},{value:"2.2 Metadata with the Non-Fungible Smart Contracts (CW721)",id:"22-metadata-with-the-non-fungible-smart-contracts-cw721",level:3},{value:"2.3 How Gas Fees will allow the Blockchain &amp; Validators to receive more token",id:"23-how-gas-fees-will-allow-the-blockchain--validators-to-receive-more-token",level:3},{value:"2.4 How Non-Fungible Tokens can be Purchased, Sold, &amp; Transferred",id:"24-how-non-fungible-tokens-can-be-purchased-sold--transferred",level:3},{value:"3. Who will be using, creating, and purchasing Non-Fungible Tokens",id:"3-who-will-be-using-creating-and-purchasing-non-fungible-tokens",level:3},{value:"3.1 What is an NFT Marketplace",id:"31-what-is-an-nft-marketplace",level:3},{value:"Specification for Non-Fungible Tokens on the Blockchain",id:"specification-for-non-fungible-tokens-on-the-blockchain",level:2},{value:"Goals of Implementation are as follows",id:"goals-of-implementation-are-as-follows",level:3},{value:"<code>x/nft</code> Module Required Functions",id:"xnft-module-required-functions",level:3},{value:"Keeper Interface",id:"keeper-interface",level:3},{value:"Types for <code>x/nft</code> Module",id:"types-for-xnft-module",level:3},{value:"Msg Service for <code>x/nft</code> Module",id:"msg-service-for-xnft-module",level:3},{value:"CW721 Specification In Detail",id:"cw721-specification-in-detail",level:2},{value:"CW721-base Specfication",id:"cw721-base-specfication",level:3},{value:"Base Messages",id:"base-messages",level:3},{value:"Base Queries",id:"base-queries",level:3},{value:"Base Receiver",id:"base-receiver",level:3},{value:"Metadata Queries",id:"metadata-queries",level:3}],p={toc:u};function h(e){var t=e.components,n=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"adr-005-non-fungible-token-standard-for-objects"},"ADR-005: Non-Fungible Token Standard for Objects"),(0,s.kt)("h2",{id:"abstract"},"Abstract"),(0,s.kt)("p",null,"Define the implementation of Non-Fungible Tokens on the Sonr Network and the developmental resources needed to create the ",(0,s.kt)("inlineCode",{parentName:"p"},"x/nft")," module.\nNon-Fungible Tokens will allow developers to create digital assets on the Sonr Network."),(0,s.kt)("h2",{id:"context"},"Context"),(0,s.kt)("h3",{id:"1-what-is-a-non-fungible-token"},"1. What is a Non-Fungible Token"),(0,s.kt)("p",null,"A Non-Fungible Token NFT is a digital asset that is commonly expressed with art, in-game items, music videos, and tickets although it is not limited to these specific items.\nNFT's can be can be understood as a verifiable purchase."),(0,s.kt)("h3",{id:"11-how-non-fungible-tokens-will-work-on-the-sonr-ecosystem"},"1.1 How Non-Fungible Tokens will Work on the Sonr Ecosystem"),(0,s.kt)("p",null,"The Non-Fungible Tokens will be owned, transferred and sold on a basic level.\nFor example, let's say that User-A purchases an NFT that is a picture of User-B's cat.\nUser-A now owns that specific NFT photo of User-B's cat and can hold it, sell it to another user (via marketplace), or transfer the NFT to another user."),(0,s.kt)("h3",{id:"12-how-non-fungible-tokens-will-be-utilized-to-create-a-consumer-focused-market"},"1.2 How Non-Fungible Tokens will be utilized to create a consumer-focused Market"),(0,s.kt)("p",null,"NFT will allow users of the Sonr ecosystem to buy and sell art, music, tickets, in-game items, and videos.\nThese specific examples will allow B2-B and B2-C projects to come onto the market in a cost-effective way due to Sonr's low gas fees."),(0,s.kt)("h3",{id:"13-how-non-fungible-tokens-can-interact-with-the-ecosystem"},"1.3 How Non-Fungible Tokens can interact with the ecosystem"),(0,s.kt)("p",null,"Non-Fungible Tokens will allow the Sonr Network to obtain Gas Fess from the purchase, sale and transfer of NFTs as well as the creation of ",(0,s.kt)("a",{parentName:"p",href:"https://docs.cosmwasm.com/cw-plus/0.9.0/cw721/spec"},"CW721 Smart Contracts")," and messages sent to the smart contracts on the blockchain."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Minting of Non-Fungible Tokens",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Mint Price (will be stored in the smart contract which the owner can withdrawl) + gas fee"))),(0,s.kt)("li",{parentName:"ul"},"Purchase of Non-Fungible Tokens",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Set Price (by Owner of NFT) + gas fee"))),(0,s.kt)("li",{parentName:"ul"},"Sale of Non-Fungible Tokens",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Gas fee (to set the NFT for sale with set price by Owner)"))),(0,s.kt)("li",{parentName:"ul"},"Transfer of Non-Fungible Tokens",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Gas fee (to transfer the NFT from the Owner to another address)"))),(0,s.kt)("li",{parentName:"ul"},"Smart Contract Creation",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Gas fee (to publish the smart contract on the blockchain)")))),(0,s.kt)("h3",{id:"2-how-will-non-fungible-tokens-be-purchased-sold--transferred-on-the-sonr-blockchain"},"2. How will Non-Fungible Tokens be purchased, sold & transferred on the Sonr blockchain"),(0,s.kt)("p",null,"The Sonr Blockchain will accept smart contracts that are in the Cosmos WebAssembly (CosmWasm) which is a smart contracting platform built for the Cosmos Ecosystem.\nThe CW721 Specification will allow developers to utilize Sonr's specific NFT implementation and have a specific set of rules to follow and allow developers to add custom logic."),(0,s.kt)("h3",{id:"21-base-of-the-cw721-specification"},"2.1 Base of the CW721 Specification"),(0,s.kt)("p",null,"The Base will handle ownership, transfers, and allowances.\n",(0,s.kt)("em",{parentName:"p"},"Allowances pertain to users allowing a portion of their wallet to be spent to purchase NFTs as well as sell and transfer them.")),(0,s.kt)("h3",{id:"22-metadata-with-the-non-fungible-smart-contracts-cw721"},"2.2 Metadata with the Non-Fungible Smart Contracts (CW721)"),(0,s.kt)("p",null,"Metadata is used to give Non-Fungible Tokens the ability to show specific data on a blockchain.\nFor Example, User-A's cat NFTs would all have metadata with an on-chain or off-chain metadata with the picture of the cat.\nMetadata can have assocaited cost depending on the developers choice of storage.\nFor example, you can utilize IPFS or Arweave storage at a cost to the developer, or utilize the Sonr Buckets that incurs a small fee."),(0,s.kt)("h3",{id:"23-how-gas-fees-will-allow-the-blockchain--validators-to-receive-more-token"},"2.3 How Gas Fees will allow the Blockchain & Validators to receive more token"),(0,s.kt)("p",null,"Along with the purchase, sale, or transfer of an NFT is an associated gas fee.\nThese gas fees can be thought of as a reward for the computationally difficult process of verifying the purchase, sale, or transfer of an NFT.\nThese gas fees will be utilized to give the validators on the network incentive to stay on the network as validators."),(0,s.kt)("h3",{id:"24-how-non-fungible-tokens-can-be-purchased-sold--transferred"},"2.4 How Non-Fungible Tokens can be Purchased, Sold, & Transferred"),(0,s.kt)("p",null,"Purchasing NFTs will be on an NFT marketplace.\nThese marketplaces can be made by any developer on the network and don\u2019t necessarily need to be owned by Sonr itself.\nAlthough Sonr may not own the majority (or any) of the marketplaces, gas fees spoken about above will still go to the Sonr blockchain and its validators."),(0,s.kt)("h3",{id:"3-who-will-be-using-creating-and-purchasing-non-fungible-tokens"},"3. Who will be using, creating, and purchasing Non-Fungible Tokens"),(0,s.kt)("p",null,"Sonr users from all walks of life will be utilizing Non-Fungible tokens for various reasons. Developers will be able to create elaborate smart contracts for various artistic expressions, online games, music, videos, and tickets that are all digitally verifiable by the blockchain. Users can play online games, purchase music, videos, art,\xa0 and purchase tickets with verifiable digital ownership to get into a multitude of events. Digital verified ownership of documents is available for most contracts, letting developers and users to be able to send and receive documents securely. Through the Sonr Blockchain, individuals will be empowered to share their art, data, documents, etc. as Non-Fungible Tokens with the rest of the world!"),(0,s.kt)("h3",{id:"31-what-is-an-nft-marketplace"},"3.1 What is an NFT Marketplace"),(0,s.kt)("p",null,"An NFT Marketplace consists of all Non-Fungible Tokens on a specific blockchain.\nThese NFTs can be purchased and sold on the marketplace by the owners of the NFT or the Smart Contract that owns the Non-Fungible Token in a minting process.\nAs all of these transactions are on the blockchain, the purchase and sale are verifiable and recorded."),(0,s.kt)("h2",{id:"specification-for-non-fungible-tokens-on-the-blockchain"},"Specification for Non-Fungible Tokens on the Blockchain"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Implementation of Non-Fungible Tokens into Blockchain")),(0,s.kt)("p",null,"The implementation of the NFT module into our blockchain will provide the ability to create smart contracts based on the CW-721 specification.\nThis specification will allow developers to create smart contracts based on types that can be called upon by developers with their own set of logic.\n",(0,s.kt)("em",{parentName:"p"},"Not all of the functionality may be used in the CW-721 specification but is available to be used by all developers.")),(0,s.kt)("h3",{id:"goals-of-implementation-are-as-follows"},"Goals of Implementation are as follows"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Store Non-Fungible Tokens and track their ownership via the blockchain"),(0,s.kt)("li",{parentName:"ul"},"Expose Keeper interface for composing modules to transfer, mint, and burn Non-Fungible tokens."),(0,s.kt)("li",{parentName:"ul"},"Expose an external Message interface for users to purchase, sell and transfer ownership of their Non-Fungible Tokens."),(0,s.kt)("li",{parentName:"ul"},"Query Non-Fungible Tokens for their supply information, ownership of a given NFT, and a list of operators that can access a specific owners tokens.")),(0,s.kt)("h3",{id:"xnft-module-required-functions"},(0,s.kt)("inlineCode",{parentName:"h3"},"x/nft")," Module Required Functions"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"MsgNewClass")," - Receive the user's request to create a class, and call the NewClass of the ",(0,s.kt)("inlineCode",{parentName:"li"},"x/nft")," module."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"MsgUpdateClass")," - Receive the user's request to update a class, and call the UpdateClass of the ",(0,s.kt)("inlineCode",{parentName:"li"},"x/nft")," module."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"MsgMintNFT")," - Receive the user's request to mint an NFT, and call the MintNFT of the ",(0,s.kt)("inlineCode",{parentName:"li"},"x/nft")," module."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"BurnNFT")," - Receive the user's request to burn an NFT, and call the BurnNFT of the ",(0,s.kt)("inlineCode",{parentName:"li"},"x/nft")," module."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"UpdateNFT")," - Receive the user's request to update an NFT, and call the UpdateNFT of the ",(0,s.kt)("inlineCode",{parentName:"li"},"x/nft")," module.")),(0,s.kt)("h3",{id:"keeper-interface"},"Keeper Interface"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go="},"type Keeper interface {\n  NewClass(class Class)\n  UpdateClass(class Class)\n\n  Mint(nft NFT\uff0creceiver sdk.AccAddress)   // updates totalSupply\n  Burn(classId string, nftId string)    // updates totalSupply\n  Update(nft NFT)\n  Transfer(classId string, nftId string, receiver sdk.AccAddress)\n\n  GetClass(classId string) Class\n  GetClasses() []Class\n\n  GetNFT(classId string, nftId string) NFT\n  GetNFTsOfClassByOwner(classId string, owner sdk.AccAddress) []NFT\n  GetNFTsOfClass(classId string) []NFT\n\n  GetOwner(classId string, nftId string) sdk.AccAddress\n  GetBalance(classId string, owner sdk.AccAddress) uint64\n  GetTotalSupply(classId string) uint64\n}\n")),(0,s.kt)("h3",{id:"types-for-xnft-module"},"Types for ",(0,s.kt)("inlineCode",{parentName:"h3"},"x/nft")," Module"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Class - describes the NFT class. Can be thought of as the smart contract address"),(0,s.kt)("li",{parentName:"ul"},"NFT - an object representing unique non-fungible assets. Each NFT is associated with a Class")),(0,s.kt)("p",null,"Class Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go="},"message Class {\n  string id          = 1;\n  string name        = 2;\n  string symbol      = 3;\n  string description = 4;\n  string uri         = 5;\n  string uri_hash    = 6;\n  google.protobuf.Any data = 7;\n}\n")),(0,s.kt)("p",null,"NFT Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go="},"message NFT {\n  string class_id           = 1;\n  string id                 = 2;\n  string uri                = 3;\n  string uri_hash           = 4;\n  google.protobuf.Any data  = 10;\n}\n")),(0,s.kt)("h3",{id:"msg-service-for-xnft-module"},"Msg Service for ",(0,s.kt)("inlineCode",{parentName:"h3"},"x/nft")," Module"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go="},"service Msg {\n  rpc Send(MsgSend)         returns (MsgSendResponse);\n}\n\nmessage MsgSend {\n  string class_id = 1;\n  string id       = 2;\n  string sender   = 3;\n  string reveiver = 4;\n}\nmessage MsgSendResponse {}\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"MsgSend")," can be used to transfer ownership of an NFT to another address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go="},"type msgServer struct{\n  k Keeper\n}\n\nfunc (m msgServer) Send(ctx context.Context, msg *types.MsgSend) (*types.MsgSendResponse, error) {\n  // check current ownership\n  assertEqual(msg.Sender, m.k.GetOwner(msg.ClassId, msg.Id))\n\n  // transfer ownership\n  m.k.Transfer(msg.ClassId, msg.Id, msg.Receiver)\n\n  return &types.MsgSendResponse{}, nil\n}\n")),(0,s.kt)("h2",{id:"cw721-specification-in-detail"},"CW721 Specification In Detail"),(0,s.kt)("p",null,"The CW721 Specification will allow developers to create smart contracts based on CosmWasm. ",(0,s.kt)("em",{parentName:"p"},"Keep in mind all Messages will have a gas cost associated")),(0,s.kt)("h3",{id:"cw721-base-specfication"},"CW721-base Specfication"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"InitMsg"),"\n: Takes the name and symbol for metadata, as well as the minter address.\nThis is a special address that has full power to mint new NFTs but does not modify existing NFTs."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"HandleMsg::Mint{token_id, owner, name, description, image}"),"\n: Creates a new token with given owner and metadata. It can only be called by the Minter set in init."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"QueryMsg::Minter{}"),"\n: Returns the minter address for this contract."),(0,s.kt)("h3",{id:"base-messages"},"Base Messages"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"TransferNFT{recipient, token_id}"),"\n: Transfers ownership of the token to the recipient account. Designed to send to an address and ",(0,s.kt)("em",{parentName:"p"},"does not")," trigger any actions to the recipient."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"SendNFT{contract, token_id, msg}"),"\n: This transfers ownership of the token to the contract account specified in the message.\nThe contract must be an address controlled by the contract, which implements the cw721Reciever interface.\nThe msg will be passed along to the recipient contract along with the token_id."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Approve{spender, token_id, expires}"),"\n: Grants permission to spender to transfer or send the given token_id."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Revoke{spender, token_id}"),"\n: This revokes a previously granted permission to transfer the given token_id."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ApproveAll{operator, expires}"),"\n: Grants operator the permission to transfer or send all tokens owned by env.sender.\nThis approval is tied to the owner, not the tokens, and applies to any future token that the owner receives as well."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"RevokeAll{operator}"),"\n: Revokes the previous ApproveAll permission granted to the given operator."),(0,s.kt)("h3",{id:"base-queries"},"Base Queries"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"OwnerOf{token_id}"),"\n: Returns the owner of a given token, as well as anyone with approval on the particular token."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ApprovedForAll{owner, include_expired}"),"\n: List all operators that can access all of the owner's tokens."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"NumToken{}"),"\n: Total number of tokens issued."),(0,s.kt)("h3",{id:"base-receiver"},"Base Receiver"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ReceiveNft{sender, token_id, msg}"),"\n: This is designed to handle SendNFT messages."),(0,s.kt)("h3",{id:"metadata-queries"},"Metadata Queries"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ContractInfo{}"),"\n: This returns top-level metadata about the contract. Namely the Name & symbol."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"NftInfo{token_id}"),"\n: This returns metadata about one particular token. The return value is based on the ERC721 Metadata JSON Schema, but directly from the contract, not as a URI. Only the image link is a URI."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"AllNftInfo{token_id}"),"\n: This returns the result of both NftInfo and OwnerOf as one query as an optimization for clients, which may want both info to display one NFT."))}h.isMDXComponent=!0}}]);