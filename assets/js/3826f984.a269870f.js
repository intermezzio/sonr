"use strict";(self.webpackChunksonr_docs=self.webpackChunksonr_docs||[]).push([[1906],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,f=u["".concat(c,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3045:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"Channels",id:"channels",displayed_sidebar:"buildSidebar"},c=void 0,l={unversionedId:"highway-sdk/channels",id:"highway-sdk/channels",title:"Channels",description:"The Sonr channel module is used to store the records of the active pubsub topics associated with Applications powered by the Sonr Network. Each record contains an ChannelDoc which describes the Topic configuration and status of the channel. Each channel is required to have a set RegisteredType to pass as a payload with ChannelMessages.",source:"@site/articles/highway-sdk/channels.md",sourceDirName:"highway-sdk",slug:"/highway-sdk/channels",permalink:"/articles/highway-sdk/channels",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/articles/highway-sdk/channels.md",tags:[],version:"current",frontMatter:{title:"Channels",id:"channels",displayed_sidebar:"buildSidebar"},sidebar:"buildSidebar",previous:{title:"Objects",permalink:"/articles/highway-sdk/objects"},next:{title:"Buckets",permalink:"/articles/highway-sdk/buckets"}},d={},p=[{value:"Overview",id:"overview",level:2},{value:"Objects Relation",id:"objects-relation",level:3},{value:"Examples",id:"examples",level:3},{value:"Usage",id:"usage",level:2},{value:"<code>CreateChannel()</code> - Records a new Channel configuration for a specified application on Sonr.",id:"createchannel---records-a-new-channel-configuration-for-a-specified-application-on-sonr",level:3},{value:"Status Codes",id:"status-codes",level:2}],u={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Sonr channel module is used to store the records of the active pubsub topics associated with Applications powered by the Sonr Network. Each record contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"ChannelDoc")," which describes the Topic configuration and status of the channel. Each channel is required to have a set RegisteredType to pass as a payload with ChannelMessages."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The record type utilized in the ",(0,i.kt)("strong",{parentName:"p"},"Channel module")," is the ",(0,i.kt)("inlineCode",{parentName:"p"},"HowIs")," type. This type provides both an interface to utilize VerifiableCredentials and modify the ChannelDoc type definition"),(0,i.kt)("h3",{id:"objects-relation"},"Objects Relation"),(0,i.kt)("p",null,"While channels determine and facilitate the actions passed through an application through realtime data streams, validators - or in our case, ",(0,i.kt)("strong",{parentName:"p"},"Objects"),", are essential to validating that data stream. Objects also make decisions as to which buckets user created data will be stored in."),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Realtime document editing -> imagine a decentralized version of Notion!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Shared device positioning and tracking -> think location services/device mapping.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Group Chat messaging -> p2p messaging, airdrops, all decentralized.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Secure direct transactions of data -> decentralized Dropbox or WeTransfer."))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Blockchain Methods supplied by Channel Module. Full implementation is still a work in progress.")),(0,i.kt)("h3",{id:"createchannel---records-a-new-channel-configuration-for-a-specified-application-on-sonr"},(0,i.kt)("inlineCode",{parentName:"h3"},"CreateChannel()")," - Records a new Channel configuration for a specified application on Sonr."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Text"},"- (`string`) Creator                : The Account Address signing this message\n- (`Session`) Session               : The Session for the authenticated user\n- (`string`) Label                  : Name of the channel defined by developer\n- (`string`) Description            : Description of the channel defined by developer\n- (`ObjectDoc`) ObjectToRegister    : The registered verified type to be sent in channel messages\n")),(0,i.kt)("h2",{id:"status-codes"},"Status Codes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-azcli"},"200 - SUCCESS\n300 - MULTIPLE CHOICE\n304 - NOT MODIFIED\n400 - BAD REQUEST\n401 - NOT AUTHORIZED\n\n")))}h.isMDXComponent=!0}}]);